main.go:35:2: exported const FP_NAN should have comment (or a comment on this block) or be unexported
main.go:67:2: exported const P_ALL should have comment (or a comment on this block) or be unexported
main.go:727:14: should omit type []byte from declaration of var IN_file; it will be inferred from the right-hand side
main.go:728:15: should omit type []byte from declaration of var OUT_file; it will be inferred from the right-hand side
main.go:729:12: should omit type []byte from declaration of var title; it will be inferred from the right-hand side
main.go:730:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:731:15: should omit type []byte from declaration of var meshpath; it will be inferred from the right-hand side
main.go:732:15: should omit type []byte from declaration of var plotpath; it will be inferred from the right-hand side
main.go:733:15: should omit type []byte from declaration of var infcpath; it will be inferred from the right-hand side
main.go:734:15: should omit type []byte from declaration of var modepath; it will be inferred from the right-hand side
main.go:735:24: should omit type []byte from declaration of var strippedInputFile; it will be inferred from the right-hand side
main.go:738:21: should drop = nil from declaration of var rj; it is the zero value
main.go:745:20: should drop = nil from declaration of var E; it is the zero value
main.go:746:20: should drop = nil from declaration of var G; it is the zero value
main.go:747:20: should drop = nil from declaration of var p; it is the zero value
main.go:748:24: should drop = nil from declaration of var U; it is the zero value
main.go:749:24: should drop = nil from declaration of var W; it is the zero value
main.go:750:24: should drop = nil from declaration of var P; it is the zero value
main.go:751:24: should drop = nil from declaration of var T; it is the zero value
main.go:752:23: should drop = nil from declaration of var Dp; it is the zero value
main.go:754:22: should drop = nil from declaration of var EMs; it is the zero value
main.go:755:22: should drop = nil from declaration of var NMs; it is the zero value
main.go:759:9: should omit type []float32 from declaration of var gX; it will be inferred from the right-hand side
main.go:760:9: should omit type []float32 from declaration of var gY; it will be inferred from the right-hand side
main.go:761:9: should omit type []float32 from declaration of var gZ; it will be inferred from the right-hand side
main.go:762:10: should omit type float32 from declaration of var pan; it will be inferred from the right-hand side
main.go:763:12: should omit type float32 from declaration of var scale; it will be inferred from the right-hand side
main.go:764:9: should omit type float32 from declaration of var dx; it will be inferred from the right-hand side
main.go:765:22: should drop = nil from declaration of var K; it is the zero value
main.go:766:23: should drop = 0 from declaration of var traceK; it is the zero value
main.go:767:22: should drop = nil from declaration of var M; it is the zero value
main.go:768:23: should drop = 0 from declaration of var traceM; it is the zero value
main.go:769:31: should drop = nil from declaration of var eqF_mech; it is the zero value
main.go:770:31: should drop = nil from declaration of var eqF_temp; it is the zero value
main.go:771:27: should drop = nil from declaration of var F_mech; it is the zero value
main.go:772:27: should drop = nil from declaration of var F_temp; it is the zero value
main.go:773:20: should drop = nil from declaration of var F; it is the zero value
main.go:774:20: should drop = nil from declaration of var R; it is the zero value
main.go:775:21: should drop = nil from declaration of var dR; it is the zero value
main.go:776:20: should drop = nil from declaration of var D; it is the zero value
main.go:777:21: should drop = nil from declaration of var dD; it is the zero value
main.go:778:21: should drop = nil from declaration of var dF; it is the zero value
main.go:779:20: should drop = nil from declaration of var L; it is the zero value
main.go:780:21: should drop = nil from declaration of var Le; it is the zero value
main.go:781:22: should drop = nil from declaration of var Q; it is the zero value
main.go:782:10: should omit type float64 from declaration of var tol; it will be inferred from the right-hand side
main.go:783:22: should drop = 0 from declaration of var shift; it is the zero value
main.go:786:20: should drop = nil from declaration of var f; it is the zero value
main.go:787:22: should drop = nil from declaration of var V; it is the zero value
main.go:790:22: should drop = 0 from declaration of var Cfreq; it is the zero value
main.go:793:19: should omit type float64 from declaration of var exagg_static; it will be inferred from the right-hand side
main.go:794:18: should omit type float64 from declaration of var exagg_modal; it will be inferred from the right-hand side
main.go:807:15: should drop = 0 from declaration of var nN; it is the zero value
main.go:808:15: should drop = 0 from declaration of var nE; it is the zero value
main.go:809:15: should drop = 0 from declaration of var nL; it is the zero value
main.go:810:15: should drop = 0 from declaration of var lc; it is the zero value
main.go:811:16: should drop = 0 from declaration of var DoF; it is the zero value
main.go:814:15: should drop = 0 from declaration of var nR; it is the zero value
main.go:815:9: should omit type []int from declaration of var nD; it will be inferred from the right-hand side
main.go:816:9: should omit type []int from declaration of var nF; it will be inferred from the right-hand side
main.go:817:9: should omit type []int from declaration of var nU; it will be inferred from the right-hand side
main.go:818:9: should omit type []int from declaration of var nW; it will be inferred from the right-hand side
main.go:819:9: should omit type []int from declaration of var nP; it will be inferred from the right-hand side
main.go:820:9: should omit type []int from declaration of var nT; it will be inferred from the right-hand side
main.go:821:15: should drop = 0 from declaration of var nI; it is the zero value
main.go:822:15: should drop = 0 from declaration of var nX; it is the zero value
main.go:823:15: should drop = 0 from declaration of var nC; it is the zero value
main.go:826:18: should drop = 0 from declaration of var shear; it is the zero value
main.go:827:17: should drop = 0 from declaration of var geom; it is the zero value
main.go:828:12: should omit type int from declaration of var anlyz; it will be inferred from the right-hand side
main.go:829:16: should drop = nil from declaration of var q; it is the zero value
main.go:830:16: should drop = nil from declaration of var r; it is the zero value
main.go:832:15: should drop = 0 from declaration of var nM; it is the zero value
main.go:835:11: should omit type int from declaration of var lump; it will be inferred from the right-hand side
main.go:836:17: should drop = 0 from declaration of var iter; it is the zero value
main.go:837:9: should omit type int from declaration of var ok; it will be inferred from the right-hand side
main.go:838:11: should omit type []int from declaration of var anim; it will be inferred from the right-hand side
main.go:839:17: should drop = 0 from declaration of var Cdof; it is the zero value
main.go:840:20: should drop = 0 from declaration of var Cmethod; it is the zero value
main.go:841:16: should drop = nil from declaration of var c; it is the zero value
main.go:842:16: should drop = nil from declaration of var m; it is the zero value
main.go:843:21: should drop = 0 from declaration of var filetype; it is the zero value
main.go:844:18: should drop = 0 from declaration of var debug; it is the zero value
main.go:845:14: should omit type int from declaration of var verbose; it will be inferred from the right-hand side
main.go:846:33: should drop = 0 from declaration of var axial_strain_warning; it is the zero value
main.go:847:21: should drop = 0 from declaration of var ExitCode; it is the zero value
main.go:848:17: should omit type int from declaration of var shear_flag; it will be inferred from the right-hand side
main.go:849:16: should omit type int from declaration of var geom_flag; it will be inferred from the right-hand side
main.go:850:17: should omit type int from declaration of var anlyz_flag; it will be inferred from the right-hand side
main.go:851:14: should omit type int from declaration of var D3_flag; it will be inferred from the right-hand side
main.go:852:16: should omit type int from declaration of var lump_flag; it will be inferred from the right-hand side
main.go:853:17: should omit type int from declaration of var modal_flag; it will be inferred from the right-hand side
main.go:854:19: should omit type int from declaration of var write_matrix; it will be inferred from the right-hand side
main.go:855:17: should omit type int from declaration of var axial_sign; it will be inferred from the right-hand side
main.go:856:20: should omit type int from declaration of var condense_flag; it will be inferred from the right-hand side
main.go:857:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:861:15: should omit type float32 from declaration of var pan_flag; it will be inferred from the right-hand side
main.go:862:11: should omit type []byte from declaration of var extn; it will be inferred from the right-hand side
main.go:1137:5: should replace iter += 1 with iter++
main.go:1197:11: if block ends with a return statement, so drop this else and outdent its block
main.go:1342:19: should omit type []byte from declaration of var stiffness_fn; it will be inferred from the right-hand side
main.go:1652:22: should drop = 0 from declaration of var ss_dF; it is the zero value
main.go:1653:21: should drop = 0 from declaration of var ss_F; it is the zero value
main.go:1654:21: should drop = 0 from declaration of var errF; it is the zero value
main.go:1701:19: should omit type float64 from declaration of var axial_strain; it will be inferred from the right-hand side
main.go:1713:4: should replace axial_strain_warning[0] += 1 with axial_strain_warning[0]++
main.go:1780:22: should drop = 0 from declaration of var delta; it is the zero value
main.go:1785:18: should drop = 0 from declaration of var T; it is the zero value
main.go:1786:9: should omit type float64 from declaration of var f1; it will be inferred from the right-hand side
main.go:1787:9: should omit type float64 from declaration of var f2; it will be inferred from the right-hand side
main.go:1788:9: should omit type float64 from declaration of var f3; it will be inferred from the right-hand side
main.go:1789:9: should omit type float64 from declaration of var f4; it will be inferred from the right-hand side
main.go:1790:9: should omit type float64 from declaration of var f5; it will be inferred from the right-hand side
main.go:1791:9: should omit type float64 from declaration of var f6; it will be inferred from the right-hand side
main.go:1792:9: should omit type float64 from declaration of var f7; it will be inferred from the right-hand side
main.go:1793:9: should omit type float64 from declaration of var f8; it will be inferred from the right-hand side
main.go:1794:9: should omit type float64 from declaration of var f9; it will be inferred from the right-hand side
main.go:1795:10: should omit type float64 from declaration of var f10; it will be inferred from the right-hand side
main.go:1796:10: should omit type float64 from declaration of var f11; it will be inferred from the right-hand side
main.go:1797:10: should omit type float64 from declaration of var f12; it will be inferred from the right-hand side
main.go:1950:14: should omit type []byte from declaration of var mass_fn; it will be inferred from the right-hand side
main.go:2206:6: should replace k += 1 with k++
main.go:2302:6: should replace k += 1 with k++
main.go:2368:13: should omit type float64 from declaration of var traceM; it will be inferred from the right-hand side
main.go:2369:14: should omit type float64 from declaration of var traceMc; it will be inferred from the right-hand side
main.go:2845:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:2846:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:2884:17: should drop = 0 from declaration of var epn0; it is the zero value
main.go:2885:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:2886:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:2902:3: should replace epn[N1[b]] += 1 with epn[N1[b]]++
main.go:2903:3: should replace epn[N2[b]] += 1 with epn[N2[b]]++
main.go:2990:4: should replace epn0 += 1 with epn0++
main.go:3014:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:3015:16: should drop = 0 from declaration of var len; it is the zero value
main.go:3017:16: should omit type []byte from declaration of var base_file; it will be inferred from the right-hand side
main.go:3018:16: should omit type []byte from declaration of var mesh_file; it will be inferred from the right-hand side
main.go:3019:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3023:4: should replace len += 1 with len++
main.go:3031:4: should replace len -= 1 with len--
main.go:3040:3: should replace len += 1 with len++
main.go:3048:3: should replace len -= 1 with len--
main.go:3054:5: should replace i += 1 with i++
main.go:3059:5: should replace len += 1 with len++
main.go:3116:14: should drop = 0 from declaration of var c; it is the zero value
main.go:3117:14: should drop = 0 from declaration of var i; it is the zero value
main.go:3119:3: should replace lim -= 1 with lim--
main.go:3127:5: should replace i += 1 with i++
main.go:3148:10: should omit type []byte from declaration of var tmp; it will be inferred from the right-hand side
main.go:3207:11: should omit type []byte from declaration of var line; it will be inferred from the right-hand side
main.go:3208:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3244:14: should drop = 0 from declaration of var c; it is the zero value
main.go:3245:14: should drop = 0 from declaration of var i; it is the zero value
main.go:3247:3: should replace lim -= 1 with lim--
main.go:3256:6: should replace i += 1 with i++
main.go:3263:6: should replace i += 1 with i++
main.go:3272:4: should replace lim -= 1 with lim--
main.go:3299:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3300:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3495:20: should drop = 0 from declaration of var Mx1; it is the zero value
main.go:3496:20: should drop = 0 from declaration of var My1; it is the zero value
main.go:3497:20: should drop = 0 from declaration of var Mz1; it is the zero value
main.go:3501:20: should drop = 0 from declaration of var Mx2; it is the zero value
main.go:3502:20: should drop = 0 from declaration of var My2; it is the zero value
main.go:3503:20: should drop = 0 from declaration of var Mz2; it is the zero value
main.go:3524:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3525:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4028:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:4029:16: should drop = 0 from declaration of var len; it is the zero value
main.go:4030:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4031:16: should omit type []byte from declaration of var base_file; it will be inferred from the right-hand side
main.go:4032:16: should omit type []byte from declaration of var mode_file; it will be inferred from the right-hand side
main.go:4033:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4202:4: should replace len += 1 with len++
main.go:4210:4: should replace len -= 1 with len--
main.go:4219:3: should replace len += 1 with len++
main.go:4223:3: should replace len -= 1 with len--
main.go:4229:5: should replace i += 1 with i++
main.go:4234:5: should replace len += 1 with len++
main.go:4258:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4259:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4341:5: should replace Cdof[0] += 1 with Cdof[0]++
main.go:4350:5: should replace k += 1 with k++
main.go:4709:3: should replace i += 1 with i++
main.go:4710:3: should replace j += 1 with j++
main.go:4713:3: should replace j += 1 with j++
main.go:4739:9: should omit type []byte from declaration of var wa; it will be inferred from the right-hand side
main.go:4740:15: should omit type []byte from declaration of var CSV_file; it will be inferred from the right-hand side
main.go:4742:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4884:13: should omit type []byte from declaration of var M_file; it will be inferred from the right-hand side
main.go:4886:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4896:3: should replace i += 1 with i++
main.go:4897:3: should replace j += 1 with j++
main.go:4900:3: should replace j += 1 with j++
main.go:5149:9: should omit type float64 from declaration of var wx; it will be inferred from the right-hand side
main.go:5150:9: should omit type float64 from declaration of var wy; it will be inferred from the right-hand side
main.go:5151:9: should omit type float64 from declaration of var wz; it will be inferred from the right-hand side
main.go:5152:10: should omit type float64 from declaration of var wx_; it will be inferred from the right-hand side
main.go:5153:10: should omit type float64 from declaration of var wy_; it will be inferred from the right-hand side
main.go:5154:10: should omit type float64 from declaration of var wz_; it will be inferred from the right-hand side
main.go:5155:10: should omit type float64 from declaration of var wxg; it will be inferred from the right-hand side
main.go:5156:10: should omit type float64 from declaration of var wyg; it will be inferred from the right-hand side
main.go:5157:10: should omit type float64 from declaration of var wzg; it will be inferred from the right-hand side
main.go:5158:19: should drop = 0 from declaration of var tx; it is the zero value
main.go:5159:20: should drop = 0 from declaration of var tx_; it is the zero value
main.go:5184:9: should omit type int from declaration of var nx; it will be inferred from the right-hand side
main.go:5185:15: should drop = 0 from declaration of var cU; it is the zero value
main.go:5186:15: should drop = 0 from declaration of var cW; it is the zero value
main.go:5187:15: should drop = 0 from declaration of var cP; it is the zero value
main.go:5222:5: should replace cU += 1 with cU++
main.go:5266:7: should replace cW += 1 with cW++
main.go:5302:7: should replace cP += 1 with cP++
main.go:5340:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5347:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5354:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5361:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5368:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5375:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5382:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5389:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5396:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5403:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5410:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5417:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5594:9: should omit type float64 from declaration of var wx; it will be inferred from the right-hand side
main.go:5595:9: should omit type float64 from declaration of var wy; it will be inferred from the right-hand side
main.go:5596:9: should omit type float64 from declaration of var wz; it will be inferred from the right-hand side
main.go:5597:10: should omit type float64 from declaration of var wx_; it will be inferred from the right-hand side
main.go:5598:10: should omit type float64 from declaration of var wy_; it will be inferred from the right-hand side
main.go:5599:10: should omit type float64 from declaration of var wz_; it will be inferred from the right-hand side
main.go:5600:10: should omit type float64 from declaration of var wxg; it will be inferred from the right-hand side
main.go:5601:10: should omit type float64 from declaration of var wyg; it will be inferred from the right-hand side
main.go:5602:10: should omit type float64 from declaration of var wzg; it will be inferred from the right-hand side
main.go:5603:19: should drop = 0 from declaration of var tx; it is the zero value
main.go:5604:20: should drop = 0 from declaration of var tx_; it is the zero value
main.go:5647:15: should drop = 0 from declaration of var cU; it is the zero value
main.go:5648:15: should drop = 0 from declaration of var cW; it is the zero value
main.go:5649:15: should drop = 0 from declaration of var cP; it is the zero value
main.go:5656:11: should omit type []byte from declaration of var fnif; it will be inferred from the right-hand side
main.go:5657:15: should omit type []byte from declaration of var CSV_file; it will be inferred from the right-hand side
main.go:5658:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:5659:9: should omit type []byte from declaration of var wa; it will be inferred from the right-hand side
main.go:5737:5: should replace cU += 1 with cU++
main.go:5760:7: should replace cW += 1 with cW++
main.go:5799:7: should replace cP += 1 with cP++
main.go:5931:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5938:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5945:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5952:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5959:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5966:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5973:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5980:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5987:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5994:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6001:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6008:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6017:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6024:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6031:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6038:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6045:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6052:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6059:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6066:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6073:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6080:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6087:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6094:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6292:26: should drop = nil from declaration of var fpif; it is the zero value
main.go:6293:25: should drop = nil from declaration of var fpm; it is the zero value
main.go:6297:11: should omit type []byte from declaration of var fnif; it will be inferred from the right-hand side
main.go:6298:13: should omit type []byte from declaration of var meshfl; it will be inferred from the right-hand side
main.go:6301:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6303:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:6314:14: should drop = 0 from declaration of var j; it is the zero value
main.go:6315:14: should drop = 0 from declaration of var m; it is the zero value
main.go:6316:14: should drop = 0 from declaration of var n; it is the zero value
main.go:6317:14: should drop = 0 from declaration of var X; it is the zero value
main.go:6318:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:6319:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:6320:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:6538:14: should drop = 0 from declaration of var X; it is the zero value
main.go:6539:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:6540:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:6541:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:6544:13: should omit type []byte from declaration of var modefl; it will be inferred from the right-hand side
main.go:6545:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6705:12: should omit type float32 from declaration of var x_min; it will be inferred from the right-hand side
main.go:6706:12: should omit type float32 from declaration of var x_max; it will be inferred from the right-hand side
main.go:6707:12: should omit type float32 from declaration of var y_min; it will be inferred from the right-hand side
main.go:6708:12: should omit type float32 from declaration of var y_max; it will be inferred from the right-hand side
main.go:6709:12: should omit type float32 from declaration of var z_min; it will be inferred from the right-hand side
main.go:6710:12: should omit type float32 from declaration of var z_max; it will be inferred from the right-hand side
main.go:6711:11: should omit type float32 from declaration of var Dxyz; it will be inferred from the right-hand side
main.go:6712:17: should omit type float32 from declaration of var rot_x_init; it will be inferred from the right-hand side
main.go:6713:18: should omit type float32 from declaration of var rot_x_final; it will be inferred from the right-hand side
main.go:6714:17: should omit type float32 from declaration of var rot_z_init; it will be inferred from the right-hand side
main.go:6715:18: should omit type float32 from declaration of var rot_z_final; it will be inferred from the right-hand side
main.go:6716:16: should omit type float32 from declaration of var zoom_init; it will be inferred from the right-hand side
main.go:6717:17: should omit type float32 from declaration of var zoom_final; it will be inferred from the right-hand side
main.go:6718:13: should omit type float32 from declaration of var frames; it will be inferred from the right-hand side
main.go:6719:9: should omit type float64 from declaration of var ex; it will be inferred from the right-hand side
main.go:6726:14: should drop = 0 from declaration of var X; it is the zero value
main.go:6727:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:6728:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:6730:13: should omit type int from declaration of var CYCLES; it will be inferred from the right-hand side
main.go:6731:25: should drop = 0 from declaration of var frame_number; it is the zero value
main.go:6732:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:6737:13: should omit type []byte from declaration of var modefl; it will be inferred from the right-hand side
main.go:6738:14: should omit type []byte from declaration of var framefl; it will be inferred from the right-hand side
main.go:6739:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6834:5: should replace frame_number += 1 with frame_number++
main.go:6853:5: should replace frame_number += 1 with frame_number++
main.go:6874:3: should replace i += 1 with i++
main.go:6910:3: should replace i += 1 with i++
main.go:6971:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7082:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:7095:4: should replace n += 1 with n++
main.go:7145:5: should replace i += 1 with i++
main.go:7161:5: should replace i += 1 with i++
main.go:7169:5: should replace i += 1 with i++
main.go:7177:3: should replace j += 1 with j++
main.go:7179:2: should replace j -= 1 with j--
main.go:7184:3: should replace i += 1 with i++
main.go:7185:3: should replace j -= 1 with j--
main.go:7207:14: should drop = 0 from declaration of var i; it is the zero value
main.go:7208:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:7209:16: should drop = 0 from declaration of var len; it is the zero value
main.go:7213:4: should replace len += 1 with len++
main.go:7222:4: should replace len -= 1 with len--
main.go:7231:2: should replace len += 1 with len++
main.go:7235:3: should replace i += 1 with i++
main.go:7236:3: should replace len += 1 with len++
main.go:7664:22: should drop = 0 from declaration of var w_old; it is the zero value
main.go:7665:14: should drop = 0 from declaration of var i; it is the zero value
main.go:7666:14: should drop = 0 from declaration of var j; it is the zero value
main.go:7667:14: should drop = 0 from declaration of var k; it is the zero value
main.go:7669:17: should drop = 0 from declaration of var disp; it is the zero value
main.go:7671:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7705:10: if block ends with a return statement, so drop this else and outdent its block
main.go:7820:3: should replace iter[0] += 1 with iter[0]++
main.go:7906:20: should drop = 0 from declaration of var tol; it is the zero value
main.go:8051:22: should drop = 0 from declaration of var d_min; it is the zero value
main.go:8052:22: should drop = 0 from declaration of var d_max; it is the zero value
main.go:8053:22: should drop = 0 from declaration of var d_old; it is the zero value
main.go:8060:22: should drop = 0 from declaration of var RQold; it is the zero value
main.go:8062:11: should omit type int from declaration of var i_ex; it will be inferred from the right-hand side
main.go:8064:17: should drop = 0 from declaration of var disp; it is the zero value
main.go:8068:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:8077:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8193:4: should replace iter[0] += 1 with iter[0]++
main.go:8240:8: should omit type float64 from declaration of var p; it will be inferred from the right-hand side
main.go:8285:15: should drop = 0 from declaration of var ok; it is the zero value
main.go:8293:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8402:11: should omit type int from declaration of var icol; it will be inferred from the right-hand side
main.go:8403:11: should omit type int from declaration of var irow; it will be inferred from the right-hand side
main.go:8435:3: should replace ipiv[icol] += 1 with ipiv[icol]++
main.go:8607:7: should replace m += 1 with m++
main.go:8632:5: should replace pd[0] -= 1 with pd[0]--
main.go:8685:20: should omit type float64 from declaration of var rms_resid_new; it will be inferred from the right-hand side
main.go:8783:8: should replace m += 1 with m++
main.go:8816:6: should replace pd[0] -= 1 with pd[0]--
main.go:8923:30: should drop = 0 from declaration of var rms_resid_new; it is the zero value
main.go:8995:20: should drop = 0 from declaration of var dtd; it is the zero value
main.go:8996:20: should drop = 0 from declaration of var ftd; it is the zero value
main.go:8997:21: should drop = 0 from declaration of var dtd2; it is the zero value
main.go:9038:23: should drop = 0 from declaration of var tr_AtA; it is the zero value
main.go:9386:21: should drop = 0 from declaration of var xtAy; it is the zero value
main.go:9523:19: should drop = 0 from declaration of var nN; it is the zero value
main.go:9524:19: should drop = 0 from declaration of var nD; it is the zero value
main.go:9726:17: should omit type []byte from declaration of var pathToFile; it will be inferred from the right-hand side
main.go:9727:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:9763:14: should drop = 0 from declaration of var c; it is the zero value
main.go:9764:8: should omit type int from declaration of var i; it will be inferred from the right-hand side
main.go:9766:3: should replace lim -= 1 with lim--
main.go:9773:4: should replace i += 1 with i++
main.go:9778:3: should replace i += 1 with i++
main.go:9792:14: should drop = 0 from declaration of var c; it is the zero value
main.go:9793:8: should omit type int from declaration of var i; it will be inferred from the right-hand side
main.go:9795:3: should replace lim -= 1 with lim--
main.go:9803:3: should replace lim -= 1 with lim--
main.go:9810:4: should replace i += 1 with i++
main.go:9815:3: should replace i += 1 with i++
main.go:9831:19: should drop = 0 from declaration of var points; it is the zero value
main.go:9834:9: should omit type int from declaration of var ok; it will be inferred from the right-hand side
main.go:9848:5: should replace points += 1 with points++
main.go:9875:14: should drop = 0 from declaration of var c; it is the zero value
main.go:9876:14: should drop = 0 from declaration of var i; it is the zero value
main.go:9878:3: should replace lim -= 1 with lim--
main.go:9886:5: should replace i += 1 with i++
main.go:9893:4: should replace i += 1 with i++
main.go:9912:11: should omit type []byte from declaration of var temp; it will be inferred from the right-hand side
main.go:9935:18: should omit type int from declaration of var line_length; it will be inferred from the right-hand side
main.go:9960:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:10009:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10024:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10051:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10064:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10065:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10094:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10095:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10124:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10125:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10155:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10156:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10169:4: should replace i += 1 with i++
main.go:10170:4: should replace j += 1 with j++
main.go:10188:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10189:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10203:4: should replace i += 1 with i++
main.go:10204:4: should replace j += 1 with j++
main.go:10220:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10221:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10222:11: should omit type int32 from declaration of var ndep; it will be inferred from the right-hand side
main.go:10340:30: exported func Cvector returns unexported type []main.fcomplex, which can be annoying to use
main.go:10353:50: exported func Cmatrix returns unexported type [][]main.fcomplex, which can be annoying to use
