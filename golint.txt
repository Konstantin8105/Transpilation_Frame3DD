main.go:1347:14: should omit type []byte from declaration of var IN_file; it will be inferred from the right-hand side
main.go:1348:15: should omit type []byte from declaration of var OUT_file; it will be inferred from the right-hand side
main.go:1349:12: should omit type []byte from declaration of var title; it will be inferred from the right-hand side
main.go:1350:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:1351:15: should omit type []byte from declaration of var meshpath; it will be inferred from the right-hand side
main.go:1352:15: should omit type []byte from declaration of var plotpath; it will be inferred from the right-hand side
main.go:1353:15: should omit type []byte from declaration of var infcpath; it will be inferred from the right-hand side
main.go:1354:15: should omit type []byte from declaration of var modepath; it will be inferred from the right-hand side
main.go:1355:24: should omit type []byte from declaration of var strippedInputFile; it will be inferred from the right-hand side
main.go:1358:21: should drop = nil from declaration of var rj; it is the zero value
main.go:1365:20: should drop = nil from declaration of var E; it is the zero value
main.go:1366:20: should drop = nil from declaration of var G; it is the zero value
main.go:1367:20: should drop = nil from declaration of var p; it is the zero value
main.go:1368:24: should drop = nil from declaration of var U; it is the zero value
main.go:1369:24: should drop = nil from declaration of var W; it is the zero value
main.go:1370:24: should drop = nil from declaration of var P; it is the zero value
main.go:1371:24: should drop = nil from declaration of var T; it is the zero value
main.go:1372:23: should drop = nil from declaration of var Dp; it is the zero value
main.go:1374:22: should drop = nil from declaration of var EMs; it is the zero value
main.go:1375:22: should drop = nil from declaration of var NMs; it is the zero value
main.go:1379:9: should omit type []float32 from declaration of var gX; it will be inferred from the right-hand side
main.go:1380:9: should omit type []float32 from declaration of var gY; it will be inferred from the right-hand side
main.go:1381:9: should omit type []float32 from declaration of var gZ; it will be inferred from the right-hand side
main.go:1382:10: should omit type float32 from declaration of var pan; it will be inferred from the right-hand side
main.go:1383:12: should omit type float32 from declaration of var scale; it will be inferred from the right-hand side
main.go:1384:9: should omit type float32 from declaration of var dx; it will be inferred from the right-hand side
main.go:1385:22: should drop = nil from declaration of var K; it is the zero value
main.go:1386:23: should drop = 0 from declaration of var traceK; it is the zero value
main.go:1387:22: should drop = nil from declaration of var M; it is the zero value
main.go:1388:23: should drop = 0 from declaration of var traceM; it is the zero value
main.go:1389:31: should drop = nil from declaration of var eqF_mech; it is the zero value
main.go:1390:31: should drop = nil from declaration of var eqF_temp; it is the zero value
main.go:1391:27: should drop = nil from declaration of var F_mech; it is the zero value
main.go:1392:27: should drop = nil from declaration of var F_temp; it is the zero value
main.go:1393:20: should drop = nil from declaration of var F; it is the zero value
main.go:1394:20: should drop = nil from declaration of var R; it is the zero value
main.go:1395:21: should drop = nil from declaration of var dR; it is the zero value
main.go:1396:20: should drop = nil from declaration of var D; it is the zero value
main.go:1397:21: should drop = nil from declaration of var dD; it is the zero value
main.go:1398:21: should drop = nil from declaration of var dF; it is the zero value
main.go:1399:20: should drop = nil from declaration of var L; it is the zero value
main.go:1400:21: should drop = nil from declaration of var Le; it is the zero value
main.go:1401:22: should drop = nil from declaration of var Q; it is the zero value
main.go:1402:10: should omit type float64 from declaration of var tol; it will be inferred from the right-hand side
main.go:1403:22: should drop = 0 from declaration of var shift; it is the zero value
main.go:1406:20: should drop = nil from declaration of var f; it is the zero value
main.go:1407:22: should drop = nil from declaration of var V; it is the zero value
main.go:1410:22: should drop = 0 from declaration of var Cfreq; it is the zero value
main.go:1413:19: should omit type float64 from declaration of var exagg_static; it will be inferred from the right-hand side
main.go:1414:18: should omit type float64 from declaration of var exagg_modal; it will be inferred from the right-hand side
main.go:1427:15: should drop = 0 from declaration of var nN; it is the zero value
main.go:1428:15: should drop = 0 from declaration of var nE; it is the zero value
main.go:1429:15: should drop = 0 from declaration of var nL; it is the zero value
main.go:1430:15: should drop = 0 from declaration of var lc; it is the zero value
main.go:1431:16: should drop = 0 from declaration of var DoF; it is the zero value
main.go:1434:15: should drop = 0 from declaration of var nR; it is the zero value
main.go:1435:9: should omit type []int from declaration of var nD; it will be inferred from the right-hand side
main.go:1436:9: should omit type []int from declaration of var nF; it will be inferred from the right-hand side
main.go:1437:9: should omit type []int from declaration of var nU; it will be inferred from the right-hand side
main.go:1438:9: should omit type []int from declaration of var nW; it will be inferred from the right-hand side
main.go:1439:9: should omit type []int from declaration of var nP; it will be inferred from the right-hand side
main.go:1440:9: should omit type []int from declaration of var nT; it will be inferred from the right-hand side
main.go:1441:15: should drop = 0 from declaration of var nI; it is the zero value
main.go:1442:15: should drop = 0 from declaration of var nX; it is the zero value
main.go:1443:15: should drop = 0 from declaration of var nC; it is the zero value
main.go:1446:18: should drop = 0 from declaration of var shear; it is the zero value
main.go:1447:17: should drop = 0 from declaration of var geom; it is the zero value
main.go:1448:12: should omit type int from declaration of var anlyz; it will be inferred from the right-hand side
main.go:1449:16: should drop = nil from declaration of var q; it is the zero value
main.go:1450:16: should drop = nil from declaration of var r; it is the zero value
main.go:1452:15: should drop = 0 from declaration of var nM; it is the zero value
main.go:1455:11: should omit type int from declaration of var lump; it will be inferred from the right-hand side
main.go:1456:17: should drop = 0 from declaration of var iter; it is the zero value
main.go:1457:9: should omit type int from declaration of var ok; it will be inferred from the right-hand side
main.go:1458:11: should omit type []int from declaration of var anim; it will be inferred from the right-hand side
main.go:1459:17: should drop = 0 from declaration of var Cdof; it is the zero value
main.go:1460:20: should drop = 0 from declaration of var Cmethod; it is the zero value
main.go:1461:16: should drop = nil from declaration of var c; it is the zero value
main.go:1462:16: should drop = nil from declaration of var m; it is the zero value
main.go:1463:21: should drop = 0 from declaration of var filetype; it is the zero value
main.go:1464:18: should drop = 0 from declaration of var debug; it is the zero value
main.go:1465:14: should omit type int from declaration of var verbose; it will be inferred from the right-hand side
main.go:1466:33: should drop = 0 from declaration of var axial_strain_warning; it is the zero value
main.go:1467:21: should drop = 0 from declaration of var ExitCode; it is the zero value
main.go:1468:17: should omit type int from declaration of var shear_flag; it will be inferred from the right-hand side
main.go:1469:16: should omit type int from declaration of var geom_flag; it will be inferred from the right-hand side
main.go:1470:17: should omit type int from declaration of var anlyz_flag; it will be inferred from the right-hand side
main.go:1471:14: should omit type int from declaration of var D3_flag; it will be inferred from the right-hand side
main.go:1472:16: should omit type int from declaration of var lump_flag; it will be inferred from the right-hand side
main.go:1473:17: should omit type int from declaration of var modal_flag; it will be inferred from the right-hand side
main.go:1474:19: should omit type int from declaration of var write_matrix; it will be inferred from the right-hand side
main.go:1475:17: should omit type int from declaration of var axial_sign; it will be inferred from the right-hand side
main.go:1476:20: should omit type int from declaration of var condense_flag; it will be inferred from the right-hand side
main.go:1477:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:1481:15: should omit type float32 from declaration of var pan_flag; it will be inferred from the right-hand side
main.go:1482:11: should omit type []byte from declaration of var extn; it will be inferred from the right-hand side
main.go:1757:5: should replace iter += 1 with iter++
main.go:1817:11: if block ends with a return statement, so drop this else and outdent its block
main.go:1962:19: should omit type []byte from declaration of var stiffness_fn; it will be inferred from the right-hand side
main.go:2272:22: should drop = 0 from declaration of var ss_dF; it is the zero value
main.go:2273:21: should drop = 0 from declaration of var ss_F; it is the zero value
main.go:2274:21: should drop = 0 from declaration of var errF; it is the zero value
main.go:2321:19: should omit type float64 from declaration of var axial_strain; it will be inferred from the right-hand side
main.go:2333:4: should replace axial_strain_warning[0] += 1 with axial_strain_warning[0]++
main.go:2400:22: should drop = 0 from declaration of var delta; it is the zero value
main.go:2405:18: should drop = 0 from declaration of var T; it is the zero value
main.go:2406:9: should omit type float64 from declaration of var f1; it will be inferred from the right-hand side
main.go:2407:9: should omit type float64 from declaration of var f2; it will be inferred from the right-hand side
main.go:2408:9: should omit type float64 from declaration of var f3; it will be inferred from the right-hand side
main.go:2409:9: should omit type float64 from declaration of var f4; it will be inferred from the right-hand side
main.go:2410:9: should omit type float64 from declaration of var f5; it will be inferred from the right-hand side
main.go:2411:9: should omit type float64 from declaration of var f6; it will be inferred from the right-hand side
main.go:2412:9: should omit type float64 from declaration of var f7; it will be inferred from the right-hand side
main.go:2413:9: should omit type float64 from declaration of var f8; it will be inferred from the right-hand side
main.go:2414:9: should omit type float64 from declaration of var f9; it will be inferred from the right-hand side
main.go:2415:10: should omit type float64 from declaration of var f10; it will be inferred from the right-hand side
main.go:2416:10: should omit type float64 from declaration of var f11; it will be inferred from the right-hand side
main.go:2417:10: should omit type float64 from declaration of var f12; it will be inferred from the right-hand side
main.go:2570:14: should omit type []byte from declaration of var mass_fn; it will be inferred from the right-hand side
main.go:2826:6: should replace k += 1 with k++
main.go:2922:6: should replace k += 1 with k++
main.go:2988:13: should omit type float64 from declaration of var traceM; it will be inferred from the right-hand side
main.go:2989:14: should omit type float64 from declaration of var traceMc; it will be inferred from the right-hand side
main.go:3464:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3465:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3503:17: should drop = 0 from declaration of var epn0; it is the zero value
main.go:3504:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3505:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3521:3: should replace epn[N1[b]] += 1 with epn[N1[b]]++
main.go:3522:3: should replace epn[N2[b]] += 1 with epn[N2[b]]++
main.go:3609:4: should replace epn0 += 1 with epn0++
main.go:3633:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:3634:16: should drop = 0 from declaration of var len; it is the zero value
main.go:3636:16: should omit type []byte from declaration of var base_file; it will be inferred from the right-hand side
main.go:3637:16: should omit type []byte from declaration of var mesh_file; it will be inferred from the right-hand side
main.go:3638:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3642:4: should replace len += 1 with len++
main.go:3650:4: should replace len -= 1 with len--
main.go:3659:3: should replace len += 1 with len++
main.go:3667:3: should replace len -= 1 with len--
main.go:3673:5: should replace i += 1 with i++
main.go:3678:5: should replace len += 1 with len++
main.go:3735:14: should drop = 0 from declaration of var c; it is the zero value
main.go:3736:14: should drop = 0 from declaration of var i; it is the zero value
main.go:3738:3: should replace lim -= 1 with lim--
main.go:3746:5: should replace i += 1 with i++
main.go:3767:10: should omit type []byte from declaration of var tmp; it will be inferred from the right-hand side
main.go:3826:11: should omit type []byte from declaration of var line; it will be inferred from the right-hand side
main.go:3827:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3863:14: should drop = 0 from declaration of var c; it is the zero value
main.go:3864:14: should drop = 0 from declaration of var i; it is the zero value
main.go:3866:3: should replace lim -= 1 with lim--
main.go:3875:6: should replace i += 1 with i++
main.go:3882:6: should replace i += 1 with i++
main.go:3891:4: should replace lim -= 1 with lim--
main.go:3918:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3919:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4114:20: should drop = 0 from declaration of var Mx1; it is the zero value
main.go:4115:20: should drop = 0 from declaration of var My1; it is the zero value
main.go:4116:20: should drop = 0 from declaration of var Mz1; it is the zero value
main.go:4120:20: should drop = 0 from declaration of var Mx2; it is the zero value
main.go:4121:20: should drop = 0 from declaration of var My2; it is the zero value
main.go:4122:20: should drop = 0 from declaration of var Mz2; it is the zero value
main.go:4143:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4144:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4647:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:4648:16: should drop = 0 from declaration of var len; it is the zero value
main.go:4649:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4650:16: should omit type []byte from declaration of var base_file; it will be inferred from the right-hand side
main.go:4651:16: should omit type []byte from declaration of var mode_file; it will be inferred from the right-hand side
main.go:4652:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4821:4: should replace len += 1 with len++
main.go:4829:4: should replace len -= 1 with len--
main.go:4838:3: should replace len += 1 with len++
main.go:4842:3: should replace len -= 1 with len--
main.go:4848:5: should replace i += 1 with i++
main.go:4853:5: should replace len += 1 with len++
main.go:4877:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4878:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4960:5: should replace Cdof[0] += 1 with Cdof[0]++
main.go:4969:5: should replace k += 1 with k++
main.go:5328:3: should replace i += 1 with i++
main.go:5329:3: should replace j += 1 with j++
main.go:5332:3: should replace j += 1 with j++
main.go:5358:9: should omit type []byte from declaration of var wa; it will be inferred from the right-hand side
main.go:5359:15: should omit type []byte from declaration of var CSV_file; it will be inferred from the right-hand side
main.go:5361:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:5503:13: should omit type []byte from declaration of var M_file; it will be inferred from the right-hand side
main.go:5505:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:5515:3: should replace i += 1 with i++
main.go:5516:3: should replace j += 1 with j++
main.go:5519:3: should replace j += 1 with j++
main.go:5768:9: should omit type float64 from declaration of var wx; it will be inferred from the right-hand side
main.go:5769:9: should omit type float64 from declaration of var wy; it will be inferred from the right-hand side
main.go:5770:9: should omit type float64 from declaration of var wz; it will be inferred from the right-hand side
main.go:5771:10: should omit type float64 from declaration of var wx_; it will be inferred from the right-hand side
main.go:5772:10: should omit type float64 from declaration of var wy_; it will be inferred from the right-hand side
main.go:5773:10: should omit type float64 from declaration of var wz_; it will be inferred from the right-hand side
main.go:5774:10: should omit type float64 from declaration of var wxg; it will be inferred from the right-hand side
main.go:5775:10: should omit type float64 from declaration of var wyg; it will be inferred from the right-hand side
main.go:5776:10: should omit type float64 from declaration of var wzg; it will be inferred from the right-hand side
main.go:5777:19: should drop = 0 from declaration of var tx; it is the zero value
main.go:5778:20: should drop = 0 from declaration of var tx_; it is the zero value
main.go:5803:9: should omit type int from declaration of var nx; it will be inferred from the right-hand side
main.go:5804:15: should drop = 0 from declaration of var cU; it is the zero value
main.go:5805:15: should drop = 0 from declaration of var cW; it is the zero value
main.go:5806:15: should drop = 0 from declaration of var cP; it is the zero value
main.go:5841:5: should replace cU += 1 with cU++
main.go:5885:7: should replace cW += 1 with cW++
main.go:5921:7: should replace cP += 1 with cP++
main.go:5959:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5966:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5973:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5980:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5987:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5994:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6001:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6008:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6015:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6022:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6029:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6036:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6213:9: should omit type float64 from declaration of var wx; it will be inferred from the right-hand side
main.go:6214:9: should omit type float64 from declaration of var wy; it will be inferred from the right-hand side
main.go:6215:9: should omit type float64 from declaration of var wz; it will be inferred from the right-hand side
main.go:6216:10: should omit type float64 from declaration of var wx_; it will be inferred from the right-hand side
main.go:6217:10: should omit type float64 from declaration of var wy_; it will be inferred from the right-hand side
main.go:6218:10: should omit type float64 from declaration of var wz_; it will be inferred from the right-hand side
main.go:6219:10: should omit type float64 from declaration of var wxg; it will be inferred from the right-hand side
main.go:6220:10: should omit type float64 from declaration of var wyg; it will be inferred from the right-hand side
main.go:6221:10: should omit type float64 from declaration of var wzg; it will be inferred from the right-hand side
main.go:6222:19: should drop = 0 from declaration of var tx; it is the zero value
main.go:6223:20: should drop = 0 from declaration of var tx_; it is the zero value
main.go:6266:15: should drop = 0 from declaration of var cU; it is the zero value
main.go:6267:15: should drop = 0 from declaration of var cW; it is the zero value
main.go:6268:15: should drop = 0 from declaration of var cP; it is the zero value
main.go:6275:11: should omit type []byte from declaration of var fnif; it will be inferred from the right-hand side
main.go:6276:15: should omit type []byte from declaration of var CSV_file; it will be inferred from the right-hand side
main.go:6277:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6278:9: should omit type []byte from declaration of var wa; it will be inferred from the right-hand side
main.go:6356:5: should replace cU += 1 with cU++
main.go:6379:7: should replace cW += 1 with cW++
main.go:6418:7: should replace cP += 1 with cP++
main.go:6550:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6557:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6564:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6571:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6578:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6585:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6592:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6599:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6606:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6613:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6620:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6627:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6636:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6643:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6650:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6657:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6664:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6671:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6678:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6685:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6692:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6699:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6706:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6713:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6911:26: should drop = nil from declaration of var fpif; it is the zero value
main.go:6912:25: should drop = nil from declaration of var fpm; it is the zero value
main.go:6916:11: should omit type []byte from declaration of var fnif; it will be inferred from the right-hand side
main.go:6917:13: should omit type []byte from declaration of var meshfl; it will be inferred from the right-hand side
main.go:6920:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6922:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:6933:14: should drop = 0 from declaration of var j; it is the zero value
main.go:6934:14: should drop = 0 from declaration of var m; it is the zero value
main.go:6935:14: should drop = 0 from declaration of var n; it is the zero value
main.go:6936:14: should drop = 0 from declaration of var X; it is the zero value
main.go:6937:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:6938:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:6939:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:7157:14: should drop = 0 from declaration of var X; it is the zero value
main.go:7158:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:7159:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:7160:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:7163:13: should omit type []byte from declaration of var modefl; it will be inferred from the right-hand side
main.go:7164:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7324:12: should omit type float32 from declaration of var x_min; it will be inferred from the right-hand side
main.go:7325:12: should omit type float32 from declaration of var x_max; it will be inferred from the right-hand side
main.go:7326:12: should omit type float32 from declaration of var y_min; it will be inferred from the right-hand side
main.go:7327:12: should omit type float32 from declaration of var y_max; it will be inferred from the right-hand side
main.go:7328:12: should omit type float32 from declaration of var z_min; it will be inferred from the right-hand side
main.go:7329:12: should omit type float32 from declaration of var z_max; it will be inferred from the right-hand side
main.go:7330:11: should omit type float32 from declaration of var Dxyz; it will be inferred from the right-hand side
main.go:7331:17: should omit type float32 from declaration of var rot_x_init; it will be inferred from the right-hand side
main.go:7332:18: should omit type float32 from declaration of var rot_x_final; it will be inferred from the right-hand side
main.go:7333:17: should omit type float32 from declaration of var rot_z_init; it will be inferred from the right-hand side
main.go:7334:18: should omit type float32 from declaration of var rot_z_final; it will be inferred from the right-hand side
main.go:7335:16: should omit type float32 from declaration of var zoom_init; it will be inferred from the right-hand side
main.go:7336:17: should omit type float32 from declaration of var zoom_final; it will be inferred from the right-hand side
main.go:7337:13: should omit type float32 from declaration of var frames; it will be inferred from the right-hand side
main.go:7338:9: should omit type float64 from declaration of var ex; it will be inferred from the right-hand side
main.go:7345:14: should drop = 0 from declaration of var X; it is the zero value
main.go:7346:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:7347:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:7349:13: should omit type int from declaration of var CYCLES; it will be inferred from the right-hand side
main.go:7350:25: should drop = 0 from declaration of var frame_number; it is the zero value
main.go:7351:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:7356:13: should omit type []byte from declaration of var modefl; it will be inferred from the right-hand side
main.go:7357:14: should omit type []byte from declaration of var framefl; it will be inferred from the right-hand side
main.go:7358:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7453:5: should replace frame_number += 1 with frame_number++
main.go:7472:5: should replace frame_number += 1 with frame_number++
main.go:7493:3: should replace i += 1 with i++
main.go:7529:3: should replace i += 1 with i++
main.go:7590:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7701:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:7714:4: should replace n += 1 with n++
main.go:7764:5: should replace i += 1 with i++
main.go:7778:5: should replace i += 1 with i++
main.go:7786:5: should replace i += 1 with i++
main.go:7794:3: should replace j += 1 with j++
main.go:7796:2: should replace j -= 1 with j--
main.go:7801:3: should replace i += 1 with i++
main.go:7802:3: should replace j -= 1 with j--
main.go:7824:14: should drop = 0 from declaration of var i; it is the zero value
main.go:7825:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:7826:16: should drop = 0 from declaration of var len; it is the zero value
main.go:7830:4: should replace len += 1 with len++
main.go:7839:4: should replace len -= 1 with len--
main.go:7848:2: should replace len += 1 with len++
main.go:7852:3: should replace i += 1 with i++
main.go:7853:3: should replace len += 1 with len++
main.go:8281:22: should drop = 0 from declaration of var w_old; it is the zero value
main.go:8282:14: should drop = 0 from declaration of var i; it is the zero value
main.go:8283:14: should drop = 0 from declaration of var j; it is the zero value
main.go:8284:14: should drop = 0 from declaration of var k; it is the zero value
main.go:8286:17: should drop = 0 from declaration of var disp; it is the zero value
main.go:8288:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:8322:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8437:3: should replace iter[0] += 1 with iter[0]++
main.go:8523:20: should drop = 0 from declaration of var tol; it is the zero value
main.go:8668:22: should drop = 0 from declaration of var d_min; it is the zero value
main.go:8669:22: should drop = 0 from declaration of var d_max; it is the zero value
main.go:8670:22: should drop = 0 from declaration of var d_old; it is the zero value
main.go:8677:22: should drop = 0 from declaration of var RQold; it is the zero value
main.go:8679:11: should omit type int from declaration of var i_ex; it will be inferred from the right-hand side
main.go:8681:17: should drop = 0 from declaration of var disp; it is the zero value
main.go:8685:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:8694:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8810:4: should replace iter[0] += 1 with iter[0]++
main.go:8857:8: should omit type float64 from declaration of var p; it will be inferred from the right-hand side
main.go:8902:15: should drop = 0 from declaration of var ok; it is the zero value
main.go:8910:10: if block ends with a return statement, so drop this else and outdent its block
main.go:9019:11: should omit type int from declaration of var icol; it will be inferred from the right-hand side
main.go:9020:11: should omit type int from declaration of var irow; it will be inferred from the right-hand side
main.go:9052:3: should replace ipiv[icol] += 1 with ipiv[icol]++
main.go:9224:7: should replace m += 1 with m++
main.go:9249:5: should replace pd[0] -= 1 with pd[0]--
main.go:9302:20: should omit type float64 from declaration of var rms_resid_new; it will be inferred from the right-hand side
main.go:9400:8: should replace m += 1 with m++
main.go:9433:6: should replace pd[0] -= 1 with pd[0]--
main.go:9540:30: should drop = 0 from declaration of var rms_resid_new; it is the zero value
main.go:9612:20: should drop = 0 from declaration of var dtd; it is the zero value
main.go:9613:20: should drop = 0 from declaration of var ftd; it is the zero value
main.go:9614:21: should drop = 0 from declaration of var dtd2; it is the zero value
main.go:9655:23: should drop = 0 from declaration of var tr_AtA; it is the zero value
main.go:10003:21: should drop = 0 from declaration of var xtAy; it is the zero value
main.go:10140:19: should drop = 0 from declaration of var nN; it is the zero value
main.go:10141:19: should drop = 0 from declaration of var nD; it is the zero value
main.go:10343:17: should omit type []byte from declaration of var pathToFile; it will be inferred from the right-hand side
main.go:10344:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:10380:14: should drop = 0 from declaration of var c; it is the zero value
main.go:10381:8: should omit type int from declaration of var i; it will be inferred from the right-hand side
main.go:10383:3: should replace lim -= 1 with lim--
main.go:10390:4: should replace i += 1 with i++
main.go:10395:3: should replace i += 1 with i++
main.go:10409:14: should drop = 0 from declaration of var c; it is the zero value
main.go:10410:8: should omit type int from declaration of var i; it will be inferred from the right-hand side
main.go:10412:3: should replace lim -= 1 with lim--
main.go:10420:3: should replace lim -= 1 with lim--
main.go:10427:4: should replace i += 1 with i++
main.go:10432:3: should replace i += 1 with i++
main.go:10448:19: should drop = 0 from declaration of var points; it is the zero value
main.go:10451:9: should omit type int from declaration of var ok; it will be inferred from the right-hand side
main.go:10465:5: should replace points += 1 with points++
main.go:10492:14: should drop = 0 from declaration of var c; it is the zero value
main.go:10493:14: should drop = 0 from declaration of var i; it is the zero value
main.go:10495:3: should replace lim -= 1 with lim--
main.go:10503:5: should replace i += 1 with i++
main.go:10510:4: should replace i += 1 with i++
main.go:10529:11: should omit type []byte from declaration of var temp; it will be inferred from the right-hand side
main.go:10552:18: should omit type int from declaration of var line_length; it will be inferred from the right-hand side
main.go:10577:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:10626:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10641:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10668:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10680:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10681:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10709:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10710:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10738:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10739:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10768:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10769:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10782:4: should replace i += 1 with i++
main.go:10783:4: should replace j += 1 with j++
main.go:10801:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10802:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10816:4: should replace i += 1 with i++
main.go:10817:4: should replace j += 1 with j++
main.go:10833:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10834:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10835:11: should omit type int32 from declaration of var ndep; it will be inferred from the right-hand side
main.go:10953:30: exported func Cvector returns unexported type []main.fcomplex, which can be annoying to use
main.go:10965:50: exported func Cmatrix returns unexported type [][]main.fcomplex, which can be annoying to use
