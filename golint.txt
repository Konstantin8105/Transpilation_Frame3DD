main.go:1307:14: should omit type []byte from declaration of var IN_file; it will be inferred from the right-hand side
main.go:1308:15: should omit type []byte from declaration of var OUT_file; it will be inferred from the right-hand side
main.go:1309:12: should omit type []byte from declaration of var title; it will be inferred from the right-hand side
main.go:1310:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:1311:15: should omit type []byte from declaration of var meshpath; it will be inferred from the right-hand side
main.go:1312:15: should omit type []byte from declaration of var plotpath; it will be inferred from the right-hand side
main.go:1313:15: should omit type []byte from declaration of var infcpath; it will be inferred from the right-hand side
main.go:1314:15: should omit type []byte from declaration of var modepath; it will be inferred from the right-hand side
main.go:1315:24: should omit type []byte from declaration of var strippedInputFile; it will be inferred from the right-hand side
main.go:1318:21: should drop = nil from declaration of var rj; it is the zero value
main.go:1325:20: should drop = nil from declaration of var E; it is the zero value
main.go:1326:20: should drop = nil from declaration of var G; it is the zero value
main.go:1327:20: should drop = nil from declaration of var p; it is the zero value
main.go:1328:24: should drop = nil from declaration of var U; it is the zero value
main.go:1329:24: should drop = nil from declaration of var W; it is the zero value
main.go:1330:24: should drop = nil from declaration of var P; it is the zero value
main.go:1331:24: should drop = nil from declaration of var T; it is the zero value
main.go:1332:23: should drop = nil from declaration of var Dp; it is the zero value
main.go:1334:22: should drop = nil from declaration of var EMs; it is the zero value
main.go:1335:22: should drop = nil from declaration of var NMs; it is the zero value
main.go:1339:9: should omit type []float32 from declaration of var gX; it will be inferred from the right-hand side
main.go:1340:9: should omit type []float32 from declaration of var gY; it will be inferred from the right-hand side
main.go:1341:9: should omit type []float32 from declaration of var gZ; it will be inferred from the right-hand side
main.go:1342:10: should omit type float32 from declaration of var pan; it will be inferred from the right-hand side
main.go:1343:12: should omit type float32 from declaration of var scale; it will be inferred from the right-hand side
main.go:1344:9: should omit type float32 from declaration of var dx; it will be inferred from the right-hand side
main.go:1345:22: should drop = nil from declaration of var K; it is the zero value
main.go:1346:23: should drop = 0 from declaration of var traceK; it is the zero value
main.go:1347:22: should drop = nil from declaration of var M; it is the zero value
main.go:1348:23: should drop = 0 from declaration of var traceM; it is the zero value
main.go:1349:31: should drop = nil from declaration of var eqF_mech; it is the zero value
main.go:1350:31: should drop = nil from declaration of var eqF_temp; it is the zero value
main.go:1351:27: should drop = nil from declaration of var F_mech; it is the zero value
main.go:1352:27: should drop = nil from declaration of var F_temp; it is the zero value
main.go:1353:20: should drop = nil from declaration of var F; it is the zero value
main.go:1354:20: should drop = nil from declaration of var R; it is the zero value
main.go:1355:21: should drop = nil from declaration of var dR; it is the zero value
main.go:1356:20: should drop = nil from declaration of var D; it is the zero value
main.go:1357:21: should drop = nil from declaration of var dD; it is the zero value
main.go:1358:21: should drop = nil from declaration of var dF; it is the zero value
main.go:1359:20: should drop = nil from declaration of var L; it is the zero value
main.go:1360:21: should drop = nil from declaration of var Le; it is the zero value
main.go:1361:22: should drop = nil from declaration of var Q; it is the zero value
main.go:1362:10: should omit type float64 from declaration of var tol; it will be inferred from the right-hand side
main.go:1363:22: should drop = 0 from declaration of var shift; it is the zero value
main.go:1366:20: should drop = nil from declaration of var f; it is the zero value
main.go:1367:22: should drop = nil from declaration of var V; it is the zero value
main.go:1370:22: should drop = 0 from declaration of var Cfreq; it is the zero value
main.go:1373:19: should omit type float64 from declaration of var exagg_static; it will be inferred from the right-hand side
main.go:1374:18: should omit type float64 from declaration of var exagg_modal; it will be inferred from the right-hand side
main.go:1387:15: should drop = 0 from declaration of var nN; it is the zero value
main.go:1388:15: should drop = 0 from declaration of var nE; it is the zero value
main.go:1389:15: should drop = 0 from declaration of var nL; it is the zero value
main.go:1390:15: should drop = 0 from declaration of var lc; it is the zero value
main.go:1391:16: should drop = 0 from declaration of var DoF; it is the zero value
main.go:1394:15: should drop = 0 from declaration of var nR; it is the zero value
main.go:1395:9: should omit type []int from declaration of var nD; it will be inferred from the right-hand side
main.go:1396:9: should omit type []int from declaration of var nF; it will be inferred from the right-hand side
main.go:1397:9: should omit type []int from declaration of var nU; it will be inferred from the right-hand side
main.go:1398:9: should omit type []int from declaration of var nW; it will be inferred from the right-hand side
main.go:1399:9: should omit type []int from declaration of var nP; it will be inferred from the right-hand side
main.go:1400:9: should omit type []int from declaration of var nT; it will be inferred from the right-hand side
main.go:1401:15: should drop = 0 from declaration of var nI; it is the zero value
main.go:1402:15: should drop = 0 from declaration of var nX; it is the zero value
main.go:1403:15: should drop = 0 from declaration of var nC; it is the zero value
main.go:1406:18: should drop = 0 from declaration of var shear; it is the zero value
main.go:1407:17: should drop = 0 from declaration of var geom; it is the zero value
main.go:1408:12: should omit type int from declaration of var anlyz; it will be inferred from the right-hand side
main.go:1409:16: should drop = nil from declaration of var q; it is the zero value
main.go:1410:16: should drop = nil from declaration of var r; it is the zero value
main.go:1412:15: should drop = 0 from declaration of var nM; it is the zero value
main.go:1415:11: should omit type int from declaration of var lump; it will be inferred from the right-hand side
main.go:1416:17: should drop = 0 from declaration of var iter; it is the zero value
main.go:1417:9: should omit type int from declaration of var ok; it will be inferred from the right-hand side
main.go:1418:11: should omit type []int from declaration of var anim; it will be inferred from the right-hand side
main.go:1419:17: should drop = 0 from declaration of var Cdof; it is the zero value
main.go:1420:20: should drop = 0 from declaration of var Cmethod; it is the zero value
main.go:1421:16: should drop = nil from declaration of var c; it is the zero value
main.go:1422:16: should drop = nil from declaration of var m; it is the zero value
main.go:1423:21: should drop = 0 from declaration of var filetype; it is the zero value
main.go:1424:18: should drop = 0 from declaration of var debug; it is the zero value
main.go:1425:14: should omit type int from declaration of var verbose; it will be inferred from the right-hand side
main.go:1426:33: should drop = 0 from declaration of var axial_strain_warning; it is the zero value
main.go:1427:21: should drop = 0 from declaration of var ExitCode; it is the zero value
main.go:1428:17: should omit type int from declaration of var shear_flag; it will be inferred from the right-hand side
main.go:1429:16: should omit type int from declaration of var geom_flag; it will be inferred from the right-hand side
main.go:1430:17: should omit type int from declaration of var anlyz_flag; it will be inferred from the right-hand side
main.go:1431:14: should omit type int from declaration of var D3_flag; it will be inferred from the right-hand side
main.go:1432:16: should omit type int from declaration of var lump_flag; it will be inferred from the right-hand side
main.go:1433:17: should omit type int from declaration of var modal_flag; it will be inferred from the right-hand side
main.go:1434:19: should omit type int from declaration of var write_matrix; it will be inferred from the right-hand side
main.go:1435:17: should omit type int from declaration of var axial_sign; it will be inferred from the right-hand side
main.go:1436:20: should omit type int from declaration of var condense_flag; it will be inferred from the right-hand side
main.go:1437:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:1441:15: should omit type float32 from declaration of var pan_flag; it will be inferred from the right-hand side
main.go:1442:11: should omit type []byte from declaration of var extn; it will be inferred from the right-hand side
main.go:1717:5: should replace iter += 1 with iter++
main.go:1777:11: if block ends with a return statement, so drop this else and outdent its block
main.go:1922:19: should omit type []byte from declaration of var stiffness_fn; it will be inferred from the right-hand side
main.go:2232:22: should drop = 0 from declaration of var ss_dF; it is the zero value
main.go:2233:21: should drop = 0 from declaration of var ss_F; it is the zero value
main.go:2234:21: should drop = 0 from declaration of var errF; it is the zero value
main.go:2281:19: should omit type float64 from declaration of var axial_strain; it will be inferred from the right-hand side
main.go:2293:4: should replace axial_strain_warning[0] += 1 with axial_strain_warning[0]++
main.go:2360:22: should drop = 0 from declaration of var delta; it is the zero value
main.go:2365:18: should drop = 0 from declaration of var T; it is the zero value
main.go:2366:9: should omit type float64 from declaration of var f1; it will be inferred from the right-hand side
main.go:2367:9: should omit type float64 from declaration of var f2; it will be inferred from the right-hand side
main.go:2368:9: should omit type float64 from declaration of var f3; it will be inferred from the right-hand side
main.go:2369:9: should omit type float64 from declaration of var f4; it will be inferred from the right-hand side
main.go:2370:9: should omit type float64 from declaration of var f5; it will be inferred from the right-hand side
main.go:2371:9: should omit type float64 from declaration of var f6; it will be inferred from the right-hand side
main.go:2372:9: should omit type float64 from declaration of var f7; it will be inferred from the right-hand side
main.go:2373:9: should omit type float64 from declaration of var f8; it will be inferred from the right-hand side
main.go:2374:9: should omit type float64 from declaration of var f9; it will be inferred from the right-hand side
main.go:2375:10: should omit type float64 from declaration of var f10; it will be inferred from the right-hand side
main.go:2376:10: should omit type float64 from declaration of var f11; it will be inferred from the right-hand side
main.go:2377:10: should omit type float64 from declaration of var f12; it will be inferred from the right-hand side
main.go:2530:14: should omit type []byte from declaration of var mass_fn; it will be inferred from the right-hand side
main.go:2786:6: should replace k += 1 with k++
main.go:2882:6: should replace k += 1 with k++
main.go:2948:13: should omit type float64 from declaration of var traceM; it will be inferred from the right-hand side
main.go:2949:14: should omit type float64 from declaration of var traceMc; it will be inferred from the right-hand side
main.go:3424:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3425:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3463:17: should drop = 0 from declaration of var epn0; it is the zero value
main.go:3464:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3465:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3481:3: should replace epn[N1[b]] += 1 with epn[N1[b]]++
main.go:3482:3: should replace epn[N2[b]] += 1 with epn[N2[b]]++
main.go:3569:4: should replace epn0 += 1 with epn0++
main.go:3593:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:3594:16: should drop = 0 from declaration of var len; it is the zero value
main.go:3596:16: should omit type []byte from declaration of var base_file; it will be inferred from the right-hand side
main.go:3597:16: should omit type []byte from declaration of var mesh_file; it will be inferred from the right-hand side
main.go:3598:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3602:4: should replace len += 1 with len++
main.go:3610:4: should replace len -= 1 with len--
main.go:3619:3: should replace len += 1 with len++
main.go:3627:3: should replace len -= 1 with len--
main.go:3633:5: should replace i += 1 with i++
main.go:3638:5: should replace len += 1 with len++
main.go:3695:14: should drop = 0 from declaration of var c; it is the zero value
main.go:3696:14: should drop = 0 from declaration of var i; it is the zero value
main.go:3698:3: should replace lim -= 1 with lim--
main.go:3706:5: should replace i += 1 with i++
main.go:3727:10: should omit type []byte from declaration of var tmp; it will be inferred from the right-hand side
main.go:3786:11: should omit type []byte from declaration of var line; it will be inferred from the right-hand side
main.go:3787:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3823:14: should drop = 0 from declaration of var c; it is the zero value
main.go:3824:14: should drop = 0 from declaration of var i; it is the zero value
main.go:3826:3: should replace lim -= 1 with lim--
main.go:3835:6: should replace i += 1 with i++
main.go:3842:6: should replace i += 1 with i++
main.go:3851:4: should replace lim -= 1 with lim--
main.go:3878:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3879:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4074:20: should drop = 0 from declaration of var Mx1; it is the zero value
main.go:4075:20: should drop = 0 from declaration of var My1; it is the zero value
main.go:4076:20: should drop = 0 from declaration of var Mz1; it is the zero value
main.go:4080:20: should drop = 0 from declaration of var Mx2; it is the zero value
main.go:4081:20: should drop = 0 from declaration of var My2; it is the zero value
main.go:4082:20: should drop = 0 from declaration of var Mz2; it is the zero value
main.go:4103:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4104:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4607:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:4608:16: should drop = 0 from declaration of var len; it is the zero value
main.go:4609:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4610:16: should omit type []byte from declaration of var base_file; it will be inferred from the right-hand side
main.go:4611:16: should omit type []byte from declaration of var mode_file; it will be inferred from the right-hand side
main.go:4612:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4781:4: should replace len += 1 with len++
main.go:4789:4: should replace len -= 1 with len--
main.go:4798:3: should replace len += 1 with len++
main.go:4802:3: should replace len -= 1 with len--
main.go:4808:5: should replace i += 1 with i++
main.go:4813:5: should replace len += 1 with len++
main.go:4837:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4838:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4920:5: should replace Cdof[0] += 1 with Cdof[0]++
main.go:4929:5: should replace k += 1 with k++
main.go:5288:3: should replace i += 1 with i++
main.go:5289:3: should replace j += 1 with j++
main.go:5292:3: should replace j += 1 with j++
main.go:5318:9: should omit type []byte from declaration of var wa; it will be inferred from the right-hand side
main.go:5319:15: should omit type []byte from declaration of var CSV_file; it will be inferred from the right-hand side
main.go:5321:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:5463:13: should omit type []byte from declaration of var M_file; it will be inferred from the right-hand side
main.go:5465:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:5475:3: should replace i += 1 with i++
main.go:5476:3: should replace j += 1 with j++
main.go:5479:3: should replace j += 1 with j++
main.go:5728:9: should omit type float64 from declaration of var wx; it will be inferred from the right-hand side
main.go:5729:9: should omit type float64 from declaration of var wy; it will be inferred from the right-hand side
main.go:5730:9: should omit type float64 from declaration of var wz; it will be inferred from the right-hand side
main.go:5731:10: should omit type float64 from declaration of var wx_; it will be inferred from the right-hand side
main.go:5732:10: should omit type float64 from declaration of var wy_; it will be inferred from the right-hand side
main.go:5733:10: should omit type float64 from declaration of var wz_; it will be inferred from the right-hand side
main.go:5734:10: should omit type float64 from declaration of var wxg; it will be inferred from the right-hand side
main.go:5735:10: should omit type float64 from declaration of var wyg; it will be inferred from the right-hand side
main.go:5736:10: should omit type float64 from declaration of var wzg; it will be inferred from the right-hand side
main.go:5737:19: should drop = 0 from declaration of var tx; it is the zero value
main.go:5738:20: should drop = 0 from declaration of var tx_; it is the zero value
main.go:5763:9: should omit type int from declaration of var nx; it will be inferred from the right-hand side
main.go:5764:15: should drop = 0 from declaration of var cU; it is the zero value
main.go:5765:15: should drop = 0 from declaration of var cW; it is the zero value
main.go:5766:15: should drop = 0 from declaration of var cP; it is the zero value
main.go:5801:5: should replace cU += 1 with cU++
main.go:5845:7: should replace cW += 1 with cW++
main.go:5881:7: should replace cP += 1 with cP++
main.go:5919:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5926:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5933:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5940:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5947:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5954:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5961:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5968:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5975:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5982:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5989:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5996:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6173:9: should omit type float64 from declaration of var wx; it will be inferred from the right-hand side
main.go:6174:9: should omit type float64 from declaration of var wy; it will be inferred from the right-hand side
main.go:6175:9: should omit type float64 from declaration of var wz; it will be inferred from the right-hand side
main.go:6176:10: should omit type float64 from declaration of var wx_; it will be inferred from the right-hand side
main.go:6177:10: should omit type float64 from declaration of var wy_; it will be inferred from the right-hand side
main.go:6178:10: should omit type float64 from declaration of var wz_; it will be inferred from the right-hand side
main.go:6179:10: should omit type float64 from declaration of var wxg; it will be inferred from the right-hand side
main.go:6180:10: should omit type float64 from declaration of var wyg; it will be inferred from the right-hand side
main.go:6181:10: should omit type float64 from declaration of var wzg; it will be inferred from the right-hand side
main.go:6182:19: should drop = 0 from declaration of var tx; it is the zero value
main.go:6183:20: should drop = 0 from declaration of var tx_; it is the zero value
main.go:6226:15: should drop = 0 from declaration of var cU; it is the zero value
main.go:6227:15: should drop = 0 from declaration of var cW; it is the zero value
main.go:6228:15: should drop = 0 from declaration of var cP; it is the zero value
main.go:6235:11: should omit type []byte from declaration of var fnif; it will be inferred from the right-hand side
main.go:6236:15: should omit type []byte from declaration of var CSV_file; it will be inferred from the right-hand side
main.go:6237:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6238:9: should omit type []byte from declaration of var wa; it will be inferred from the right-hand side
main.go:6316:5: should replace cU += 1 with cU++
main.go:6339:7: should replace cW += 1 with cW++
main.go:6378:7: should replace cP += 1 with cP++
main.go:6510:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6517:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6524:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6531:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6538:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6545:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6552:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6559:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6566:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6573:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6580:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6587:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6596:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6603:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6610:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6617:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6624:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6631:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6638:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6645:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6652:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6659:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6666:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6673:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6871:26: should drop = nil from declaration of var fpif; it is the zero value
main.go:6872:25: should drop = nil from declaration of var fpm; it is the zero value
main.go:6876:11: should omit type []byte from declaration of var fnif; it will be inferred from the right-hand side
main.go:6877:13: should omit type []byte from declaration of var meshfl; it will be inferred from the right-hand side
main.go:6880:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6882:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:6893:14: should drop = 0 from declaration of var j; it is the zero value
main.go:6894:14: should drop = 0 from declaration of var m; it is the zero value
main.go:6895:14: should drop = 0 from declaration of var n; it is the zero value
main.go:6896:14: should drop = 0 from declaration of var X; it is the zero value
main.go:6897:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:6898:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:6899:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:7117:14: should drop = 0 from declaration of var X; it is the zero value
main.go:7118:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:7119:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:7120:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:7123:13: should omit type []byte from declaration of var modefl; it will be inferred from the right-hand side
main.go:7124:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7284:12: should omit type float32 from declaration of var x_min; it will be inferred from the right-hand side
main.go:7285:12: should omit type float32 from declaration of var x_max; it will be inferred from the right-hand side
main.go:7286:12: should omit type float32 from declaration of var y_min; it will be inferred from the right-hand side
main.go:7287:12: should omit type float32 from declaration of var y_max; it will be inferred from the right-hand side
main.go:7288:12: should omit type float32 from declaration of var z_min; it will be inferred from the right-hand side
main.go:7289:12: should omit type float32 from declaration of var z_max; it will be inferred from the right-hand side
main.go:7290:11: should omit type float32 from declaration of var Dxyz; it will be inferred from the right-hand side
main.go:7291:17: should omit type float32 from declaration of var rot_x_init; it will be inferred from the right-hand side
main.go:7292:18: should omit type float32 from declaration of var rot_x_final; it will be inferred from the right-hand side
main.go:7293:17: should omit type float32 from declaration of var rot_z_init; it will be inferred from the right-hand side
main.go:7294:18: should omit type float32 from declaration of var rot_z_final; it will be inferred from the right-hand side
main.go:7295:16: should omit type float32 from declaration of var zoom_init; it will be inferred from the right-hand side
main.go:7296:17: should omit type float32 from declaration of var zoom_final; it will be inferred from the right-hand side
main.go:7297:13: should omit type float32 from declaration of var frames; it will be inferred from the right-hand side
main.go:7298:9: should omit type float64 from declaration of var ex; it will be inferred from the right-hand side
main.go:7305:14: should drop = 0 from declaration of var X; it is the zero value
main.go:7306:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:7307:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:7309:13: should omit type int from declaration of var CYCLES; it will be inferred from the right-hand side
main.go:7310:25: should drop = 0 from declaration of var frame_number; it is the zero value
main.go:7311:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:7316:13: should omit type []byte from declaration of var modefl; it will be inferred from the right-hand side
main.go:7317:14: should omit type []byte from declaration of var framefl; it will be inferred from the right-hand side
main.go:7318:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7413:5: should replace frame_number += 1 with frame_number++
main.go:7432:5: should replace frame_number += 1 with frame_number++
main.go:7453:3: should replace i += 1 with i++
main.go:7489:3: should replace i += 1 with i++
main.go:7550:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7661:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:7674:4: should replace n += 1 with n++
main.go:7724:5: should replace i += 1 with i++
main.go:7740:5: should replace i += 1 with i++
main.go:7748:5: should replace i += 1 with i++
main.go:7756:3: should replace j += 1 with j++
main.go:7758:2: should replace j -= 1 with j--
main.go:7763:3: should replace i += 1 with i++
main.go:7764:3: should replace j -= 1 with j--
main.go:7786:14: should drop = 0 from declaration of var i; it is the zero value
main.go:7787:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:7788:16: should drop = 0 from declaration of var len; it is the zero value
main.go:7792:4: should replace len += 1 with len++
main.go:7801:4: should replace len -= 1 with len--
main.go:7810:2: should replace len += 1 with len++
main.go:7814:3: should replace i += 1 with i++
main.go:7815:3: should replace len += 1 with len++
main.go:8243:22: should drop = 0 from declaration of var w_old; it is the zero value
main.go:8244:14: should drop = 0 from declaration of var i; it is the zero value
main.go:8245:14: should drop = 0 from declaration of var j; it is the zero value
main.go:8246:14: should drop = 0 from declaration of var k; it is the zero value
main.go:8248:17: should drop = 0 from declaration of var disp; it is the zero value
main.go:8250:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:8284:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8399:3: should replace iter[0] += 1 with iter[0]++
main.go:8485:20: should drop = 0 from declaration of var tol; it is the zero value
main.go:8630:22: should drop = 0 from declaration of var d_min; it is the zero value
main.go:8631:22: should drop = 0 from declaration of var d_max; it is the zero value
main.go:8632:22: should drop = 0 from declaration of var d_old; it is the zero value
main.go:8639:22: should drop = 0 from declaration of var RQold; it is the zero value
main.go:8641:11: should omit type int from declaration of var i_ex; it will be inferred from the right-hand side
main.go:8643:17: should drop = 0 from declaration of var disp; it is the zero value
main.go:8647:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:8656:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8772:4: should replace iter[0] += 1 with iter[0]++
main.go:8819:8: should omit type float64 from declaration of var p; it will be inferred from the right-hand side
main.go:8864:15: should drop = 0 from declaration of var ok; it is the zero value
main.go:8872:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8981:11: should omit type int from declaration of var icol; it will be inferred from the right-hand side
main.go:8982:11: should omit type int from declaration of var irow; it will be inferred from the right-hand side
main.go:9014:3: should replace ipiv[icol] += 1 with ipiv[icol]++
main.go:9186:7: should replace m += 1 with m++
main.go:9211:5: should replace pd[0] -= 1 with pd[0]--
main.go:9264:20: should omit type float64 from declaration of var rms_resid_new; it will be inferred from the right-hand side
main.go:9362:8: should replace m += 1 with m++
main.go:9395:6: should replace pd[0] -= 1 with pd[0]--
main.go:9502:30: should drop = 0 from declaration of var rms_resid_new; it is the zero value
main.go:9574:20: should drop = 0 from declaration of var dtd; it is the zero value
main.go:9575:20: should drop = 0 from declaration of var ftd; it is the zero value
main.go:9576:21: should drop = 0 from declaration of var dtd2; it is the zero value
main.go:9617:23: should drop = 0 from declaration of var tr_AtA; it is the zero value
main.go:9965:21: should drop = 0 from declaration of var xtAy; it is the zero value
main.go:10102:19: should drop = 0 from declaration of var nN; it is the zero value
main.go:10103:19: should drop = 0 from declaration of var nD; it is the zero value
main.go:10305:17: should omit type []byte from declaration of var pathToFile; it will be inferred from the right-hand side
main.go:10306:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:10342:14: should drop = 0 from declaration of var c; it is the zero value
main.go:10343:8: should omit type int from declaration of var i; it will be inferred from the right-hand side
main.go:10345:3: should replace lim -= 1 with lim--
main.go:10352:4: should replace i += 1 with i++
main.go:10357:3: should replace i += 1 with i++
main.go:10371:14: should drop = 0 from declaration of var c; it is the zero value
main.go:10372:8: should omit type int from declaration of var i; it will be inferred from the right-hand side
main.go:10374:3: should replace lim -= 1 with lim--
main.go:10382:3: should replace lim -= 1 with lim--
main.go:10389:4: should replace i += 1 with i++
main.go:10394:3: should replace i += 1 with i++
main.go:10410:19: should drop = 0 from declaration of var points; it is the zero value
main.go:10413:9: should omit type int from declaration of var ok; it will be inferred from the right-hand side
main.go:10427:5: should replace points += 1 with points++
main.go:10454:14: should drop = 0 from declaration of var c; it is the zero value
main.go:10455:14: should drop = 0 from declaration of var i; it is the zero value
main.go:10457:3: should replace lim -= 1 with lim--
main.go:10465:5: should replace i += 1 with i++
main.go:10472:4: should replace i += 1 with i++
main.go:10491:11: should omit type []byte from declaration of var temp; it will be inferred from the right-hand side
main.go:10514:18: should omit type int from declaration of var line_length; it will be inferred from the right-hand side
main.go:10539:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:10588:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10603:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10630:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:10642:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10643:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10671:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10672:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10700:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10701:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10730:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10731:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10744:4: should replace i += 1 with i++
main.go:10745:4: should replace j += 1 with j++
main.go:10763:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10764:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10778:4: should replace i += 1 with i++
main.go:10779:4: should replace j += 1 with j++
main.go:10795:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:10796:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:10797:11: should omit type int32 from declaration of var ndep; it will be inferred from the right-hand side
main.go:10915:30: exported func Cvector returns unexported type []main.fcomplex, which can be annoying to use
main.go:10927:50: exported func Cmatrix returns unexported type [][]main.fcomplex, which can be annoying to use
