main.go:1213:14: should omit type []byte from declaration of var IN_file; it will be inferred from the right-hand side
main.go:1214:15: should omit type []byte from declaration of var OUT_file; it will be inferred from the right-hand side
main.go:1215:12: should omit type []byte from declaration of var title; it will be inferred from the right-hand side
main.go:1216:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:1217:15: should omit type []byte from declaration of var meshpath; it will be inferred from the right-hand side
main.go:1218:15: should omit type []byte from declaration of var plotpath; it will be inferred from the right-hand side
main.go:1219:15: should omit type []byte from declaration of var infcpath; it will be inferred from the right-hand side
main.go:1220:15: should omit type []byte from declaration of var modepath; it will be inferred from the right-hand side
main.go:1221:24: should omit type []byte from declaration of var strippedInputFile; it will be inferred from the right-hand side
main.go:1224:21: should drop = nil from declaration of var rj; it is the zero value
main.go:1231:20: should drop = nil from declaration of var E; it is the zero value
main.go:1232:20: should drop = nil from declaration of var G; it is the zero value
main.go:1233:20: should drop = nil from declaration of var p; it is the zero value
main.go:1234:24: should drop = nil from declaration of var U; it is the zero value
main.go:1235:24: should drop = nil from declaration of var W; it is the zero value
main.go:1236:24: should drop = nil from declaration of var P; it is the zero value
main.go:1237:24: should drop = nil from declaration of var T; it is the zero value
main.go:1238:23: should drop = nil from declaration of var Dp; it is the zero value
main.go:1240:22: should drop = nil from declaration of var EMs; it is the zero value
main.go:1241:22: should drop = nil from declaration of var NMs; it is the zero value
main.go:1245:9: should omit type []float32 from declaration of var gX; it will be inferred from the right-hand side
main.go:1246:9: should omit type []float32 from declaration of var gY; it will be inferred from the right-hand side
main.go:1247:9: should omit type []float32 from declaration of var gZ; it will be inferred from the right-hand side
main.go:1248:10: should omit type float32 from declaration of var pan; it will be inferred from the right-hand side
main.go:1249:12: should omit type float32 from declaration of var scale; it will be inferred from the right-hand side
main.go:1250:9: should omit type float32 from declaration of var dx; it will be inferred from the right-hand side
main.go:1251:22: should drop = nil from declaration of var K; it is the zero value
main.go:1252:23: should drop = 0 from declaration of var traceK; it is the zero value
main.go:1253:22: should drop = nil from declaration of var M; it is the zero value
main.go:1254:23: should drop = 0 from declaration of var traceM; it is the zero value
main.go:1255:31: should drop = nil from declaration of var eqF_mech; it is the zero value
main.go:1256:31: should drop = nil from declaration of var eqF_temp; it is the zero value
main.go:1257:27: should drop = nil from declaration of var F_mech; it is the zero value
main.go:1258:27: should drop = nil from declaration of var F_temp; it is the zero value
main.go:1259:20: should drop = nil from declaration of var F; it is the zero value
main.go:1260:20: should drop = nil from declaration of var R; it is the zero value
main.go:1261:21: should drop = nil from declaration of var dR; it is the zero value
main.go:1262:20: should drop = nil from declaration of var D; it is the zero value
main.go:1263:21: should drop = nil from declaration of var dD; it is the zero value
main.go:1264:21: should drop = nil from declaration of var dF; it is the zero value
main.go:1265:20: should drop = nil from declaration of var L; it is the zero value
main.go:1266:21: should drop = nil from declaration of var Le; it is the zero value
main.go:1267:22: should drop = nil from declaration of var Q; it is the zero value
main.go:1268:10: should omit type float64 from declaration of var tol; it will be inferred from the right-hand side
main.go:1269:22: should drop = 0 from declaration of var shift; it is the zero value
main.go:1272:20: should drop = nil from declaration of var f; it is the zero value
main.go:1273:22: should drop = nil from declaration of var V; it is the zero value
main.go:1276:22: should drop = 0 from declaration of var Cfreq; it is the zero value
main.go:1279:19: should omit type float64 from declaration of var exagg_static; it will be inferred from the right-hand side
main.go:1280:18: should omit type float64 from declaration of var exagg_modal; it will be inferred from the right-hand side
main.go:1293:15: should drop = 0 from declaration of var nN; it is the zero value
main.go:1294:15: should drop = 0 from declaration of var nE; it is the zero value
main.go:1295:15: should drop = 0 from declaration of var nL; it is the zero value
main.go:1296:15: should drop = 0 from declaration of var lc; it is the zero value
main.go:1297:16: should drop = 0 from declaration of var DoF; it is the zero value
main.go:1300:15: should drop = 0 from declaration of var nR; it is the zero value
main.go:1301:9: should omit type []int from declaration of var nD; it will be inferred from the right-hand side
main.go:1302:9: should omit type []int from declaration of var nF; it will be inferred from the right-hand side
main.go:1303:9: should omit type []int from declaration of var nU; it will be inferred from the right-hand side
main.go:1304:9: should omit type []int from declaration of var nW; it will be inferred from the right-hand side
main.go:1305:9: should omit type []int from declaration of var nP; it will be inferred from the right-hand side
main.go:1306:9: should omit type []int from declaration of var nT; it will be inferred from the right-hand side
main.go:1307:15: should drop = 0 from declaration of var nI; it is the zero value
main.go:1308:15: should drop = 0 from declaration of var nX; it is the zero value
main.go:1309:15: should drop = 0 from declaration of var nC; it is the zero value
main.go:1312:18: should drop = 0 from declaration of var shear; it is the zero value
main.go:1313:17: should drop = 0 from declaration of var geom; it is the zero value
main.go:1314:12: should omit type int from declaration of var anlyz; it will be inferred from the right-hand side
main.go:1315:16: should drop = nil from declaration of var q; it is the zero value
main.go:1316:16: should drop = nil from declaration of var r; it is the zero value
main.go:1318:15: should drop = 0 from declaration of var nM; it is the zero value
main.go:1321:11: should omit type int from declaration of var lump; it will be inferred from the right-hand side
main.go:1322:17: should drop = 0 from declaration of var iter; it is the zero value
main.go:1323:9: should omit type int from declaration of var ok; it will be inferred from the right-hand side
main.go:1324:11: should omit type []int from declaration of var anim; it will be inferred from the right-hand side
main.go:1325:17: should drop = 0 from declaration of var Cdof; it is the zero value
main.go:1326:20: should drop = 0 from declaration of var Cmethod; it is the zero value
main.go:1327:16: should drop = nil from declaration of var c; it is the zero value
main.go:1328:16: should drop = nil from declaration of var m; it is the zero value
main.go:1329:21: should drop = 0 from declaration of var filetype; it is the zero value
main.go:1330:18: should drop = 0 from declaration of var debug; it is the zero value
main.go:1331:14: should omit type int from declaration of var verbose; it will be inferred from the right-hand side
main.go:1332:33: should drop = 0 from declaration of var axial_strain_warning; it is the zero value
main.go:1333:21: should drop = 0 from declaration of var ExitCode; it is the zero value
main.go:1334:17: should omit type int from declaration of var shear_flag; it will be inferred from the right-hand side
main.go:1335:16: should omit type int from declaration of var geom_flag; it will be inferred from the right-hand side
main.go:1336:17: should omit type int from declaration of var anlyz_flag; it will be inferred from the right-hand side
main.go:1337:14: should omit type int from declaration of var D3_flag; it will be inferred from the right-hand side
main.go:1338:16: should omit type int from declaration of var lump_flag; it will be inferred from the right-hand side
main.go:1339:17: should omit type int from declaration of var modal_flag; it will be inferred from the right-hand side
main.go:1340:19: should omit type int from declaration of var write_matrix; it will be inferred from the right-hand side
main.go:1341:17: should omit type int from declaration of var axial_sign; it will be inferred from the right-hand side
main.go:1342:20: should omit type int from declaration of var condense_flag; it will be inferred from the right-hand side
main.go:1343:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:1347:15: should omit type float32 from declaration of var pan_flag; it will be inferred from the right-hand side
main.go:1348:11: should omit type []byte from declaration of var extn; it will be inferred from the right-hand side
main.go:1623:5: should replace iter += 1 with iter++
main.go:1683:11: if block ends with a return statement, so drop this else and outdent its block
main.go:1819:19: should omit type []byte from declaration of var stiffness_fn; it will be inferred from the right-hand side
main.go:2108:22: should drop = 0 from declaration of var ss_dF; it is the zero value
main.go:2109:21: should drop = 0 from declaration of var ss_F; it is the zero value
main.go:2110:21: should drop = 0 from declaration of var errF; it is the zero value
main.go:2155:19: should omit type float64 from declaration of var axial_strain; it will be inferred from the right-hand side
main.go:2167:4: should replace axial_strain_warning[0] += 1 with axial_strain_warning[0]++
main.go:2223:22: should drop = 0 from declaration of var delta; it is the zero value
main.go:2228:18: should drop = 0 from declaration of var T; it is the zero value
main.go:2229:9: should omit type float64 from declaration of var f1; it will be inferred from the right-hand side
main.go:2230:9: should omit type float64 from declaration of var f2; it will be inferred from the right-hand side
main.go:2231:9: should omit type float64 from declaration of var f3; it will be inferred from the right-hand side
main.go:2232:9: should omit type float64 from declaration of var f4; it will be inferred from the right-hand side
main.go:2233:9: should omit type float64 from declaration of var f5; it will be inferred from the right-hand side
main.go:2234:9: should omit type float64 from declaration of var f6; it will be inferred from the right-hand side
main.go:2235:9: should omit type float64 from declaration of var f7; it will be inferred from the right-hand side
main.go:2236:9: should omit type float64 from declaration of var f8; it will be inferred from the right-hand side
main.go:2237:9: should omit type float64 from declaration of var f9; it will be inferred from the right-hand side
main.go:2238:10: should omit type float64 from declaration of var f10; it will be inferred from the right-hand side
main.go:2239:10: should omit type float64 from declaration of var f11; it will be inferred from the right-hand side
main.go:2240:10: should omit type float64 from declaration of var f12; it will be inferred from the right-hand side
main.go:2384:14: should omit type []byte from declaration of var mass_fn; it will be inferred from the right-hand side
main.go:2625:6: should replace k += 1 with k++
main.go:2710:6: should replace k += 1 with k++
main.go:2771:13: should omit type float64 from declaration of var traceM; it will be inferred from the right-hand side
main.go:2772:14: should omit type float64 from declaration of var traceMc; it will be inferred from the right-hand side
main.go:3068:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3069:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3101:17: should drop = 0 from declaration of var epn0; it is the zero value
main.go:3102:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3103:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3119:3: should replace epn[N1[b]] += 1 with epn[N1[b]]++
main.go:3120:3: should replace epn[N2[b]] += 1 with epn[N2[b]]++
main.go:3207:4: should replace epn0 += 1 with epn0++
main.go:3223:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:3224:16: should drop = 0 from declaration of var len; it is the zero value
main.go:3226:16: should omit type []byte from declaration of var base_file; it will be inferred from the right-hand side
main.go:3227:16: should omit type []byte from declaration of var mesh_file; it will be inferred from the right-hand side
main.go:3228:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3232:4: should replace len += 1 with len++
main.go:3240:4: should replace len -= 1 with len--
main.go:3249:3: should replace len += 1 with len++
main.go:3257:3: should replace len -= 1 with len--
main.go:3263:5: should replace i += 1 with i++
main.go:3268:5: should replace len += 1 with len++
main.go:3323:14: should drop = 0 from declaration of var c; it is the zero value
main.go:3324:14: should drop = 0 from declaration of var i; it is the zero value
main.go:3326:3: should replace lim -= 1 with lim--
main.go:3334:5: should replace i += 1 with i++
main.go:3352:10: should omit type []byte from declaration of var tmp; it will be inferred from the right-hand side
main.go:3405:11: should omit type []byte from declaration of var line; it will be inferred from the right-hand side
main.go:3406:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3436:14: should drop = 0 from declaration of var c; it is the zero value
main.go:3437:14: should drop = 0 from declaration of var i; it is the zero value
main.go:3439:3: should replace lim -= 1 with lim--
main.go:3448:6: should replace i += 1 with i++
main.go:3455:6: should replace i += 1 with i++
main.go:3464:4: should replace lim -= 1 with lim--
main.go:3487:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3488:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:3638:20: should drop = 0 from declaration of var Mx1; it is the zero value
main.go:3639:20: should drop = 0 from declaration of var My1; it is the zero value
main.go:3640:20: should drop = 0 from declaration of var Mz1; it is the zero value
main.go:3644:20: should drop = 0 from declaration of var Mx2; it is the zero value
main.go:3645:20: should drop = 0 from declaration of var My2; it is the zero value
main.go:3646:20: should drop = 0 from declaration of var Mz2; it is the zero value
main.go:3667:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:3668:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4158:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:4159:16: should drop = 0 from declaration of var len; it is the zero value
main.go:4160:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4161:16: should omit type []byte from declaration of var base_file; it will be inferred from the right-hand side
main.go:4162:16: should omit type []byte from declaration of var mode_file; it will be inferred from the right-hand side
main.go:4163:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4332:4: should replace len += 1 with len++
main.go:4340:4: should replace len -= 1 with len--
main.go:4349:3: should replace len += 1 with len++
main.go:4353:3: should replace len -= 1 with len--
main.go:4359:5: should replace i += 1 with i++
main.go:4364:5: should replace len += 1 with len++
main.go:4384:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:4385:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4467:5: should replace Cdof[0] += 1 with Cdof[0]++
main.go:4476:5: should replace k += 1 with k++
main.go:4827:3: should replace i += 1 with i++
main.go:4828:3: should replace j += 1 with j++
main.go:4831:3: should replace j += 1 with j++
main.go:4854:9: should omit type []byte from declaration of var wa; it will be inferred from the right-hand side
main.go:4855:15: should omit type []byte from declaration of var CSV_file; it will be inferred from the right-hand side
main.go:4857:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:4994:13: should omit type []byte from declaration of var M_file; it will be inferred from the right-hand side
main.go:4996:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:5006:3: should replace i += 1 with i++
main.go:5007:3: should replace j += 1 with j++
main.go:5010:3: should replace j += 1 with j++
main.go:5233:9: should omit type float64 from declaration of var wx; it will be inferred from the right-hand side
main.go:5234:9: should omit type float64 from declaration of var wy; it will be inferred from the right-hand side
main.go:5235:9: should omit type float64 from declaration of var wz; it will be inferred from the right-hand side
main.go:5236:10: should omit type float64 from declaration of var wx_; it will be inferred from the right-hand side
main.go:5237:10: should omit type float64 from declaration of var wy_; it will be inferred from the right-hand side
main.go:5238:10: should omit type float64 from declaration of var wz_; it will be inferred from the right-hand side
main.go:5239:10: should omit type float64 from declaration of var wxg; it will be inferred from the right-hand side
main.go:5240:10: should omit type float64 from declaration of var wyg; it will be inferred from the right-hand side
main.go:5241:10: should omit type float64 from declaration of var wzg; it will be inferred from the right-hand side
main.go:5242:19: should drop = 0 from declaration of var tx; it is the zero value
main.go:5243:20: should drop = 0 from declaration of var tx_; it is the zero value
main.go:5268:9: should omit type int from declaration of var nx; it will be inferred from the right-hand side
main.go:5269:15: should drop = 0 from declaration of var cU; it is the zero value
main.go:5270:15: should drop = 0 from declaration of var cW; it is the zero value
main.go:5271:15: should drop = 0 from declaration of var cP; it is the zero value
main.go:5306:5: should replace cU += 1 with cU++
main.go:5350:7: should replace cW += 1 with cW++
main.go:5386:7: should replace cP += 1 with cP++
main.go:5424:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5431:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5438:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5445:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5452:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5459:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5466:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5473:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5480:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5487:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5494:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5501:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5639:9: should omit type float64 from declaration of var wx; it will be inferred from the right-hand side
main.go:5640:9: should omit type float64 from declaration of var wy; it will be inferred from the right-hand side
main.go:5641:9: should omit type float64 from declaration of var wz; it will be inferred from the right-hand side
main.go:5642:10: should omit type float64 from declaration of var wx_; it will be inferred from the right-hand side
main.go:5643:10: should omit type float64 from declaration of var wy_; it will be inferred from the right-hand side
main.go:5644:10: should omit type float64 from declaration of var wz_; it will be inferred from the right-hand side
main.go:5645:10: should omit type float64 from declaration of var wxg; it will be inferred from the right-hand side
main.go:5646:10: should omit type float64 from declaration of var wyg; it will be inferred from the right-hand side
main.go:5647:10: should omit type float64 from declaration of var wzg; it will be inferred from the right-hand side
main.go:5648:19: should drop = 0 from declaration of var tx; it is the zero value
main.go:5649:20: should drop = 0 from declaration of var tx_; it is the zero value
main.go:5692:15: should drop = 0 from declaration of var cU; it is the zero value
main.go:5693:15: should drop = 0 from declaration of var cW; it is the zero value
main.go:5694:15: should drop = 0 from declaration of var cP; it is the zero value
main.go:5701:11: should omit type []byte from declaration of var fnif; it will be inferred from the right-hand side
main.go:5702:15: should omit type []byte from declaration of var CSV_file; it will be inferred from the right-hand side
main.go:5703:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:5704:9: should omit type []byte from declaration of var wa; it will be inferred from the right-hand side
main.go:5782:5: should replace cU += 1 with cU++
main.go:5805:7: should replace cW += 1 with cW++
main.go:5844:7: should replace cP += 1 with cP++
main.go:5976:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5983:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5990:12: if block ends with a return statement, so drop this else and outdent its block
main.go:5997:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6004:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6011:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6018:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6025:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6032:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6039:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6046:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6053:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6062:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6069:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6076:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6083:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6090:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6097:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6104:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6111:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6118:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6125:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6132:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6139:12: if block ends with a return statement, so drop this else and outdent its block
main.go:6322:26: should drop = nil from declaration of var fpif; it is the zero value
main.go:6323:25: should drop = nil from declaration of var fpm; it is the zero value
main.go:6327:11: should omit type []byte from declaration of var fnif; it will be inferred from the right-hand side
main.go:6328:13: should omit type []byte from declaration of var meshfl; it will be inferred from the right-hand side
main.go:6331:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6333:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:6344:14: should drop = 0 from declaration of var j; it is the zero value
main.go:6345:14: should drop = 0 from declaration of var m; it is the zero value
main.go:6346:14: should drop = 0 from declaration of var n; it is the zero value
main.go:6347:14: should drop = 0 from declaration of var X; it is the zero value
main.go:6348:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:6349:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:6350:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:6561:14: should drop = 0 from declaration of var X; it is the zero value
main.go:6562:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:6563:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:6564:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:6567:13: should omit type []byte from declaration of var modefl; it will be inferred from the right-hand side
main.go:6568:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6710:12: should omit type float32 from declaration of var x_min; it will be inferred from the right-hand side
main.go:6711:12: should omit type float32 from declaration of var x_max; it will be inferred from the right-hand side
main.go:6712:12: should omit type float32 from declaration of var y_min; it will be inferred from the right-hand side
main.go:6713:12: should omit type float32 from declaration of var y_max; it will be inferred from the right-hand side
main.go:6714:12: should omit type float32 from declaration of var z_min; it will be inferred from the right-hand side
main.go:6715:12: should omit type float32 from declaration of var z_max; it will be inferred from the right-hand side
main.go:6716:11: should omit type float32 from declaration of var Dxyz; it will be inferred from the right-hand side
main.go:6717:17: should omit type float32 from declaration of var rot_x_init; it will be inferred from the right-hand side
main.go:6718:18: should omit type float32 from declaration of var rot_x_final; it will be inferred from the right-hand side
main.go:6719:17: should omit type float32 from declaration of var rot_z_init; it will be inferred from the right-hand side
main.go:6720:18: should omit type float32 from declaration of var rot_z_final; it will be inferred from the right-hand side
main.go:6721:16: should omit type float32 from declaration of var zoom_init; it will be inferred from the right-hand side
main.go:6722:17: should omit type float32 from declaration of var zoom_final; it will be inferred from the right-hand side
main.go:6723:13: should omit type float32 from declaration of var frames; it will be inferred from the right-hand side
main.go:6724:9: should omit type float64 from declaration of var ex; it will be inferred from the right-hand side
main.go:6731:14: should drop = 0 from declaration of var X; it is the zero value
main.go:6732:14: should drop = 0 from declaration of var Y; it is the zero value
main.go:6733:14: should drop = 0 from declaration of var Z; it is the zero value
main.go:6735:13: should omit type int from declaration of var CYCLES; it will be inferred from the right-hand side
main.go:6736:25: should drop = 0 from declaration of var frame_number; it is the zero value
main.go:6737:9: should omit type int from declaration of var lw; it will be inferred from the right-hand side
main.go:6742:13: should omit type []byte from declaration of var modefl; it will be inferred from the right-hand side
main.go:6743:14: should omit type []byte from declaration of var framefl; it will be inferred from the right-hand side
main.go:6744:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:6839:5: should replace frame_number += 1 with frame_number++
main.go:6858:5: should replace frame_number += 1 with frame_number++
main.go:6879:3: should replace i += 1 with i++
main.go:6915:3: should replace i += 1 with i++
main.go:6964:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7069:17: should drop = 0 from declaration of var sfrv; it is the zero value
main.go:7082:4: should replace n += 1 with n++
main.go:7122:5: should replace i += 1 with i++
main.go:7136:5: should replace i += 1 with i++
main.go:7144:5: should replace i += 1 with i++
main.go:7152:3: should replace j += 1 with j++
main.go:7154:2: should replace j -= 1 with j--
main.go:7159:3: should replace i += 1 with i++
main.go:7160:3: should replace j -= 1 with j--
main.go:7177:14: should drop = 0 from declaration of var i; it is the zero value
main.go:7178:21: should drop = 0 from declaration of var full_len; it is the zero value
main.go:7179:16: should drop = 0 from declaration of var len; it is the zero value
main.go:7183:4: should replace len += 1 with len++
main.go:7192:4: should replace len -= 1 with len--
main.go:7201:2: should replace len += 1 with len++
main.go:7205:3: should replace i += 1 with i++
main.go:7206:3: should replace len += 1 with len++
main.go:7597:22: should drop = 0 from declaration of var w_old; it is the zero value
main.go:7598:14: should drop = 0 from declaration of var i; it is the zero value
main.go:7599:14: should drop = 0 from declaration of var j; it is the zero value
main.go:7600:14: should drop = 0 from declaration of var k; it is the zero value
main.go:7602:17: should drop = 0 from declaration of var disp; it is the zero value
main.go:7604:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7638:10: if block ends with a return statement, so drop this else and outdent its block
main.go:7753:3: should replace iter[0] += 1 with iter[0]++
main.go:7824:20: should drop = 0 from declaration of var tol; it is the zero value
main.go:7934:22: should drop = 0 from declaration of var d_min; it is the zero value
main.go:7935:22: should drop = 0 from declaration of var d_max; it is the zero value
main.go:7936:22: should drop = 0 from declaration of var d_old; it is the zero value
main.go:7943:22: should drop = 0 from declaration of var RQold; it is the zero value
main.go:7945:11: should omit type int from declaration of var i_ex; it will be inferred from the right-hand side
main.go:7947:17: should drop = 0 from declaration of var disp; it is the zero value
main.go:7951:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:7960:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8076:4: should replace iter[0] += 1 with iter[0]++
main.go:8119:8: should omit type float64 from declaration of var p; it will be inferred from the right-hand side
main.go:8162:15: should drop = 0 from declaration of var ok; it is the zero value
main.go:8170:10: if block ends with a return statement, so drop this else and outdent its block
main.go:8266:11: should omit type int from declaration of var icol; it will be inferred from the right-hand side
main.go:8267:11: should omit type int from declaration of var irow; it will be inferred from the right-hand side
main.go:8299:3: should replace ipiv[icol] += 1 with ipiv[icol]++
main.go:8454:7: should replace m += 1 with m++
main.go:8479:5: should replace pd[0] -= 1 with pd[0]--
main.go:8520:20: should omit type float64 from declaration of var rms_resid_new; it will be inferred from the right-hand side
main.go:8596:8: should replace m += 1 with m++
main.go:8629:6: should replace pd[0] -= 1 with pd[0]--
main.go:8721:30: should drop = 0 from declaration of var rms_resid_new; it is the zero value
main.go:8787:20: should drop = 0 from declaration of var dtd; it is the zero value
main.go:8788:20: should drop = 0 from declaration of var ftd; it is the zero value
main.go:8789:21: should drop = 0 from declaration of var dtd2; it is the zero value
main.go:8818:23: should drop = 0 from declaration of var tr_AtA; it is the zero value
main.go:9146:21: should drop = 0 from declaration of var xtAy; it is the zero value
main.go:9271:19: should drop = 0 from declaration of var nN; it is the zero value
main.go:9272:19: should drop = 0 from declaration of var nD; it is the zero value
main.go:9462:17: should omit type []byte from declaration of var pathToFile; it will be inferred from the right-hand side
main.go:9463:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:9497:14: should drop = 0 from declaration of var c; it is the zero value
main.go:9498:8: should omit type int from declaration of var i; it will be inferred from the right-hand side
main.go:9500:3: should replace lim -= 1 with lim--
main.go:9507:4: should replace i += 1 with i++
main.go:9512:3: should replace i += 1 with i++
main.go:9524:14: should drop = 0 from declaration of var c; it is the zero value
main.go:9525:8: should omit type int from declaration of var i; it will be inferred from the right-hand side
main.go:9527:3: should replace lim -= 1 with lim--
main.go:9535:3: should replace lim -= 1 with lim--
main.go:9542:4: should replace i += 1 with i++
main.go:9547:3: should replace i += 1 with i++
main.go:9561:19: should drop = 0 from declaration of var points; it is the zero value
main.go:9564:9: should omit type int from declaration of var ok; it will be inferred from the right-hand side
main.go:9578:5: should replace points += 1 with points++
main.go:9603:14: should drop = 0 from declaration of var c; it is the zero value
main.go:9604:14: should drop = 0 from declaration of var i; it is the zero value
main.go:9606:3: should replace lim -= 1 with lim--
main.go:9614:5: should replace i += 1 with i++
main.go:9621:4: should replace i += 1 with i++
main.go:9637:11: should omit type []byte from declaration of var temp; it will be inferred from the right-hand side
main.go:9658:18: should omit type int from declaration of var line_length; it will be inferred from the right-hand side
main.go:9681:13: should omit type []byte from declaration of var errMsg; it will be inferred from the right-hand side
main.go:9725:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:9737:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:9761:8: should omit type int from declaration of var e; it will be inferred from the right-hand side
main.go:9769:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:9770:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:9794:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:9795:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:9819:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:9820:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:9845:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:9846:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:9859:4: should replace i += 1 with i++
main.go:9860:4: should replace j += 1 with j++
main.go:9874:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:9875:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:9889:4: should replace i += 1 with i++
main.go:9890:4: should replace j += 1 with j++
main.go:9901:11: should omit type int32 from declaration of var nrow; it will be inferred from the right-hand side
main.go:9902:11: should omit type int32 from declaration of var ncol; it will be inferred from the right-hand side
main.go:9903:11: should omit type int32 from declaration of var ndep; it will be inferred from the right-hand side
main.go:10009:30: exported func Cvector returns unexported type []main.fcomplex, which can be annoying to use
main.go:10020:50: exported func Cmatrix returns unexported type [][]main.fcomplex, which can be annoying to use
